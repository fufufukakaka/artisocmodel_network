//====================================================================/
//　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　/
// artisoc                                                            /
//                                                                    /
//====================================================================/

Version = 3.5;



//-------------------------------------------------------
// Component Tree
//-------------------------------------------------------
UNIVERSE {
    Space Map(0,0),Square_2D(50, 50, !Loop, North, 1, !Map_3D){
        AgtType Point(0, 0)[114] {
            Dim ID(0, 0) As Integer = (0);
            Dim X(0, 0) As Double = (0.0);
            Dim Y(0, 0) As Double = (0.0);
            Dim Layer(0, 0) As Integer = (0);
            Dim Direction(0, 0) As Double = (0.0);
            Dim DijkstraValue(0, 0) As Double = (0.0);
            Dim ChoiceAgt(0, 0) As Agt = (0);
            Dim NearAgtSet(0, 0) As AgtSet = ();
            Dim StreetAgt(0, 0) As Agt = (0);
            Dim site(0, 0) As Integer = (0);
            Dim color(0, 0) As Integer = (0);
        }
        AgtType Person(0, 0)[0] {
            Dim ID(0, 0) As Integer = (0);
            Dim X(0, 0) As Double = (0.0);
            Dim Y(0, 0) As Double = (0.0);
            Dim Layer(0, 0) As Integer = (0);
            Dim Direction(0, 0) As Double = (0.0);
            Dim RouteArray(0, 0) As String = ("");
            Dim RouteCount(0, 0) As Integer = (0);
            Dim Color(0, 0) As Integer = (0);
            Dim action(0, 0) As Integer = (0);
            Dim check(0, 0) As Integer = (0);
            Dim nowhome(0, 0) As Integer = (0);
            Dim daycount(0, 0) As Double = (0.0);
            Dim speed(0, 0) As Double = (0.0);
            Dim dist(0, 0) As Double = (0.0);
            Dim archivement(0, 0) As Integer = (0);
            Dim money(0, 0) As Integer = (0);
            Dim goalpointid(0, 0) As Integer = (0);
            Dim consump(0, 0) As Integer = (0);
            Dim potential(0, 0) As Integer = (0);
            Dim timecount(0, 0) As Integer = (0);
            Dim timecount_sum(0, 0) As Integer = (0);
            Dim freetime(0, 0) As Integer = (0);
            Dim freetime_sum(0, 0) As Integer = (0);
            Dim consump_sum(0, 0) As Integer = (0);
            Dim jobrouteoption(0, 0)[6] As String = (6*"");
            Dim shoprouteoption(0, 0)[6] As String = (6*"");
            Dim destination(0, 0) As Integer = (0);
            Dim utilize(0, 0) As Double = (0.0);
            Dim jobhomerouteoption(0, 0)[6] As String = (6*"");
            Dim shophomerouteoption(0, 0)[6] As String = (6*"");
            Dim returnroute(0, 0) As String = ("");
            Dim archive_sum(0, 0) As Integer = (0);
            Dim positiveline(0, 0) As Double = (0.0);
            Dim negativeline(0, 0) As Double = (0.0);
            Dim homeid(0, 0) As Integer = (0);
        }
        AgtType government(0, 0)[1] {
            Dim ID(0, 0) As Integer = (0);
            Dim X(0, 0) As Double = (0.0);
            Dim Y(0, 0) As Double = (0.0);
            Dim Layer(0, 0) As Integer = (0);
            Dim Direction(0, 0) As Double = (0.0);
            Dim bridge_status(0, 0)[11] As Integer = (11*0);
            Dim bridge_demand(0, 0)[11] As Integer = (11*0);
            Dim bridge_averagedemand(0, 0) As Double = (0.0);
            Dim bridge_distance(0, 0)[11] As Double = (11*0.0);
            Dim budget(0, 0) As Double = (0.0);
            Dim bridgecount(0, 0) As Integer = (0);
            Dim nowbridge(0, 0) As Integer = (0);
            Dim bridgepeoplewatch(0, 0) As Boolean = (0);
            Dim collapsebridge(0, 0) As Integer = (0);
        }
        AgtType bridgecore(0, 0)[11] {
            Dim ID(0, 0) As Integer = (0);
            Dim X(0, 0) As Double = (0.0);
            Dim Y(0, 0) As Double = (0.0);
            Dim Layer(0, 0) As Integer = (0);
            Dim Direction(0, 0) As Double = (0.0);
            Dim demand(0, 0) As Integer = (0);
            Dim strength(0, 0) As Double = (0.0);
            Dim beginpointid(0, 0) As Integer = (0);
            Dim endpointid(0, 0) As Integer = (0);
            Dim distance(0, 0) As Double = (0.0);
            Dim hasblock(0, 0) As Boolean = (0);
            Dim bridgetime(0, 0) As Integer = (0);
            Dim bridgelink(0, 0) As Integer = (0);
            Dim length(0, 0) As Double = (0.0);
            Dim iron(0, 0) As Double = (0.0);
            Dim value(0, 0) As Double = (0.0);
            Dim repaircost(0, 0) As Double = (0.0);
            Dim collapse(0, 0) As Boolean = (0);
            Dim collapseflag(0, 0) As Boolean = (0);
            Dim transport(0, 0) As Double = (0.0);
            Dim nextdamage(0, 0) As Double = (0.0);
            Dim sign(0, 0) As String = ("");
            Dim transportsum(0, 0) As Double = (0.0);
        }
    }
    AgtType Link(0, 0)[250] {
        Dim ID(0, 0) As Integer = (0);
        Dim Begin_agt(0, 0) As Agt = (0);
        Dim End_Agt(0, 0) As Agt = (0);
        Dim StreetAgt(0, 0) As Agt = (0);
        Dim ReverseLinkAgt(0, 0) As Agt = (0);
    }
    AgtType Street(0, 0)[0] {
        Dim ID(0, 0) As Integer = (0);
        Dim Points(0, 0) As String = ("");
        Dim Cost(0, 0) As Double = (0.0);
        Dim ReverseStreetAgt(0, 0) As Agt = (0);
    }
    AgtType DijkstraStreet(0, 0)[0] {
        Dim ID(0, 0) As Integer = (0);
        Dim Route(0, 0) As String = ("");
        Dim Value(0, 0) As Double = (0.0);
        Dim StreetRoute(0, 0) As String = ("");
    }
    AgtType StreetBackup(0, 0)[0] {
        Dim ID(0, 0) As Integer = (0);
        Dim StreetAgt(0, 0) As Agt = (0);
        Dim Points(0, 0) As String = ("");
        Dim Cost(0, 0) As Double = (0.0);
        Dim ReverseStreetAgt(0, 0) As Agt = (0);
    }
    Dim TemporaryStreetAgtset(0, 0) As AgtSet = ();
    AgtType PointBackup(0, 0)[0] {
        Dim ID(0, 0) As Integer = (0);
        Dim PointAgt(0, 0) As Agt = (0);
        Dim StreetAgt(0, 0) As Agt = (0);
    }
    Dim shoplist(0, 0)[6] As Integer = (6*0);
    Dim officelist(0, 0)[6] As Integer = (6*0);
    Dim numberofendagt(0, 0) <5>  As Integer = (0);
    Dim day(0, 0) <10>  As Double = (0.0);
    Dim checkmode(0, 0) As Boolean = (0);
    Dim daychange(0, 0) As Boolean = (0);
    Dim averagearchive(0, 0) As Double = (0.0);
    Dim averagefreetime(0, 0) As Double = (0.0);
    Dim averagemovetime(0, 0) As Double = (0.0);
    Dim averageconsump(0, 0) As Double = (0.0);
    Dim averageutilize(0, 0) As Double = (0.0);
    Dim daytimecount(0, 0) As Integer = (0);
    Dim monthcheckmode(0, 0) As Boolean = (0);
    Dim simulationcode(0, 0) As String = ("");
    Dim univbudget(0, 0) As Double = (0.0);
    Dim threshold(0, 0) As Double = (0.0);
    Dim testnumber(0, 0) As Integer = (0);
    Dim situation(0, 0) As String = ("");
    Dim daymode(0, 0) As Integer = (0);
    Dim warpday(0, 0) <10>  As Double = (0.0);
    Dim daycalc(0, 0) As Integer = (0);
    Dim recalculate(0, 0) As Boolean = (0);
    Dim strengthlimit(0, 0) As Double = (0.0);
}


//-------------------------------------------------------
// Agent Variable Initial Data
//-------------------------------------------------------
Initial_Value {
    UNIVERSE.SIMULATIONCODE = 1("2015/12/01littletestwarp4");
    UNIVERSE.UNIVBUDGET = 1(50.0);
    UNIVERSE.THRESHOLD = 1(0.8);
    UNIVERSE.TESTNUMBER = 1(0);
    UNIVERSE.STRENGTHLIMIT = 1(0.01);
    UNIVERSE.MAP.POINT.X = 114(44.99105546, 42.48658318, 43.20214669, 46.86940966, 45.16994633, 40.96601073, 43.82826476, 45.52772809, 48.21109123, 47.49552773
, 42.03935599, 46.69051878, 41.77101968, 43.47048301, 46.60107335, 44.72271914, 41.94991055, 47.13774597, 49.28443649, 48.8372093
, 43.38103757, 37.20930233, 36.76207513, 38.46153846, 41.5921288, 37.47763864, 33.72093023, 35.33094812, 38.5509839, 39.80322004
, 36.85152057, 37.29874776, 38.81932021, 37.65652952, 38.5509839, 40.96601073, 34.97316637, 34.16815742, 37.83542039, 40.33989267
, 47.76386404, 29.42754919, 29.33810376, 2*29.42754919, 29.24865832, 2*29.15921288, 29.60644007, 29.78533095, 29.69588551, 30.50089445
, 31.12701252, 30.23255814, 31.03756708, 30.41144902, 3.13059034, 1.967799642, 6.797853309, 0.894454383, 4.830053667, 8.228980322
, 4.293381038, 2.59391771, 2.862254025, 10.46511628, 8.050089445, 2.772808587, 2.236135957, 1.699463327, 4.472271914, 6.797853309
, 5.277280859, 5.098389982, 8.31842576, 9.838998211, 13.59570662, 12.79069767, 14.490161, 13.59570662, 11.18067979, 5.813953488
, 9.481216458, 2*13.41681574, 10.82289803, 9.033989267, 12.6118068, 17.26296959, 10.82289803, 8.765652952, 13.59570662, 8.676207513
, 5.545617174, 9.39177102, 6.887298748, 16.36851521, 17.88908766, 18.60465116, 18.51520572, 17.88908766, 19.23076923, 20.30411449
, 17.79964222, 15.02683363, 15.38461538, 15.56350626, 14.04293381, 15.11627907, 16.27906977, 1.810054877, 1.633032395, 1.19047619
, 1.633032395);
    UNIVERSE.MAP.POINT.Y = 114(43.112701252, 43.202146691, 40.429338103999996, 37.92486583, 34.3470483, 33.184257599999995, 28.35420394, 25.67084079, 28.44364937, 20.12522361
, 18.87298748, 15.921288009999998, 14.758497319999996, 11.359570660000003, 10.644007160000001, 5.992844359999999, 7.7817531299999985, 3.39892665, 5.903398930000002, 0.8050089400000005
, 46.243291592, 42.397137746, 37.835420389999996, 34.88372093, 37.11985689, 31.48479428, 37.11985689, 28.35420394, 25.58139535, 20.84078712
, 15.563506259999997, 12.880143109999999, 10.017889089999997, 5.187835419999999, 2.0572450800000013, 2.5939177099999995, 42.039355993, 45.438282648, 47.227191413, 47.763864043
, 45.796064401, 48.211091234, 45.706618962, 41.14490161, 39.35599284, 35.68872987, 33.094812160000004, 28.80143113, 25.76028623, 23.70304114
, 19.67799642, 17.710196779999997, 12.254025040000002, 8.94454383, 6.171735239999997, 1.6100178900000017, 47.137745975, 42.397137746, 35.509839, 30.85867621
, 24.23971377, 25.2236136, 18.78354204, 21.10912343, 15.474060819999998, 14.57960644, 12.611806799999997, 11.896243290000001, 9.302325580000002, 5.6350626099999985
, 2.9516994600000004, 2.14669052, 5.992844359999999, 8.676207509999998, 9.03398927, 6.529516989999998, 3.2200357800000035, 7.423971379999998, 11.53846154, 16.368515209999998
, 17.262969589999997, 17.08407871, 21.10912343, 20.39355993, 27.19141324, 27.63864043, 2*31.93202147, 28.35420394, 37.11985689, 39.7137746
, 39.98211091, 43.381037567, 45.974955277, 46.779964222, 48.568872987, 1.6994633300000004, 4.203935600000001, 9.212880140000003, 13.506261180000003, 18.78354204
, 23.07692308, 28.08586762, 31.39534884, 34.70483005, 37.29874776, 41.502683363, 44.543828265, 46.601073345, 47.942754919, 2.0755886000000032
, 25.97362365, 35.26730395, 39.781377230000004);
    UNIVERSE.MAP.POINT.LAYER = 114(114*0);
    UNIVERSE.MAP.POINT.DIRECTION = 114(114*0.0);
    UNIVERSE.MAP.POINT.DIJKSTRAVALUE = 114(114*0.0);
    UNIVERSE.MAP.POINT.SITE = 114(20*1, 36*0, 3, 2, 0, 3, 3*0, 3, 2, 2*0
, 3, 2, 3, 40*0, 3*2, 3);
    UNIVERSE.MAP.POINT.COLOR = 114(114*0);
    UNIVERSE.MAP.GOVERNMENT.X = 1(24.41860465);
    UNIVERSE.MAP.GOVERNMENT.Y = 1(23.61359571);
    UNIVERSE.MAP.GOVERNMENT.LAYER = 1(0);
    UNIVERSE.MAP.GOVERNMENT.DIRECTION = 1(0.0);
    UNIVERSE.MAP.BRIDGECORE.X = 11(22.25615153, 2*22.07912905, 22.87573022, 24.29191007, 23.14126394, 24.02637635, 24.38042131, 24.29191007, 24.20339883, 23.93786511);
    UNIVERSE.MAP.BRIDGECORE.Y = 11(48.101433882, 45.269074172, 39.07328731, 35.35581519, 28.4519384, 24.02637635, 19.1582581, 13.050982470000001, 9.15648787, 4.996459549999997
, 1.7215436400000002);
    UNIVERSE.MAP.BRIDGECORE.LAYER = 11(11*0);
    UNIVERSE.MAP.BRIDGECORE.DIRECTION = 11(11*0.0);
    UNIVERSE.MAP.BRIDGECORE.DEMAND = 11(11*0);
    UNIVERSE.MAP.BRIDGECORE.STRENGTH = 11(11*0.0);
    UNIVERSE.MAP.BRIDGECORE.BEGINPOINTID = 11(109, 42, 43, 104, 102, 48, 100, 52, 98, 54
, 96);
    UNIVERSE.MAP.BRIDGECORE.ENDPOINTID = 11(41, 107, 105, 45, 47, 101, 50, 99, 53, 97
, 55);
    UNIVERSE.MAP.BRIDGECORE.DISTANCE = 11(11*0.0);
    UNIVERSE.MAP.BRIDGECORE.HASBLOCK = 11(11*0);
    UNIVERSE.MAP.BRIDGECORE.BRIDGETIME = 11(1831188, 1884841, 1882124, 1903035, 1903839, 1887778, 1710057, 1927965, 1827867, 1904743
, 2085240);
    UNIVERSE.MAP.BRIDGECORE.BRIDGELINK = 11(11*0);
    UNIVERSE.MAP.BRIDGECORE.LENGTH = 11(16.63, 58.57, 18.51, 81.56, 42.11, 100.0, 71.87, 18.86, 39.56, 33.06
, 17.48);
    UNIVERSE.MAP.BRIDGECORE.IRON = 11(11*0.0);
    UNIVERSE.MAP.BRIDGECORE.VALUE = 11(11*0.0);
    UNIVERSE.MAP.BRIDGECORE.REPAIRCOST = 11(11*0.0);
    UNIVERSE.MAP.BRIDGECORE.COLLAPSE = 11(11*0);
    UNIVERSE.MAP.BRIDGECORE.COLLAPSEFLAG = 11(11*0);
    UNIVERSE.MAP.BRIDGECORE.NEXTDAMAGE = 11(11*0.0);
    UNIVERSE.MAP.BRIDGECORE.SIGN = 11(11*"");
}


//-------------------------------------------------------
// Agent Rule
//-------------------------------------------------------
#begin_rule UNIVERSE
include"dijkstra.inc"

Univ_Init{
initialize_dijkstra()
// open database
openDB("jdbc:postgresql:db_artisoc","org.postgresql.Driver","db_artisoc","postgres","fukasawa1225")

universe.checkmode = FALSE
universe.monthcheckmode = FALSE
universe.recalculate = FALSE
universe.daytimecount = 1
universe.officelist(0) = 57
universe.officelist(1) = 112
universe.officelist(2) = 111
universe.officelist(3) = 64
universe.officelist(4) = 68
universe.officelist(5) = 110
universe.shoplist(0) = 56
universe.shoplist(1) = 113
universe.shoplist(2) = 59
universe.shoplist(3) = 63
universe.shoplist(4) = 67
universe.shoplist(5) = 69
universe.warpday = 0

dim streetagtset as agtset
dim streetagt as agt
dim i as integer

}

Univ_Step_Begin{
dim k as integer
dim i  as integer
dim streetagtset as agtset
dim streetagt as agt

// test
if universe.warpday  == 120 then
	update_cost(universe.Map.bridgecore(5).beginpointid,universe.Map.bridgecore(5).endpointid,1000000)
	update_cost(universe.Map.bridgecore(4).beginpointid,universe.Map.bridgecore(4).endpointid,1000000)
	update_cost(universe.Map.bridgecore(6).beginpointid,universe.Map.bridgecore(6).endpointid,1000000)
elseif universe.warpday  == 240 then
	update_cost(universe.Map.bridgecore(3).beginpointid,universe.Map.bridgecore(3).endpointid,1000000)
	update_cost(universe.Map.bridgecore(7).beginpointid,universe.Map.bridgecore(7).endpointid,1000000)
	update_cost(universe.Map.bridgecore(8).beginpointid,universe.Map.bridgecore(8).endpointid,1000000)
end if

universe.situation = 
universe.Map.bridgecore(0).sign&
universe.Map.bridgecore(1).sign&
universe.Map.bridgecore(2).sign&
universe.Map.bridgecore(3).sign&
universe.Map.bridgecore(4).sign&
universe.Map.bridgecore(5).sign&
universe.Map.bridgecore(6).sign&
universe.Map.bridgecore(7).sign&
universe.Map.bridgecore(8).sign&
universe.Map.bridgecore(9).sign&
universe.Map.bridgecore(10).sign

if universe.recalculate == TRUE then
	for k = 0 to 99
				for i = 0 to 5
				if querydb("SELECT personid,listnumber,status,jobroute,shoproute,jobhomeroute,shophomeroute FROM personroute WHERE personid="&k&" and listnumber = "&i&" and status  = "&universe.situation&";") >= 0 then
					// open table
					querydb("SELECT personid,listnumber,status,jobroute,shoproute,jobhomeroute,shophomeroute FROM personroute WHERE personid="&k&" and listnumber = "&i&" and status  = "&universe.situation&";")
					nextdb()
					universe.Map.Person(k).jobrouteoption(i) = getvalueDB("jobroute")
					universe.Map.Person(k).shoprouteoption(i) = getvalueDB("shoproute")
					universe.Map.Person(k).jobhomerouteoption(i) = getvalueDB("jobhomeroute")
					universe.Map.Person(k).shophomerouteoption(i) = getvalueDB("shophomeroute")
				else
					universe.Map.Person(k).jobrouteoption(i) = @dijkstra(universe.Map.Person(k).homeid, CStr(universe.officelist(i)))
					universe.Map.Person(k).shoprouteoption(i) = @dijkstra(universe.Map.Person(k).homeid, CStr(universe.shoplist(i)))
					universe.Map.Person(k).jobhomerouteoption(i) = @dijkstra(universe.officelist(i),CStr(universe.Map.Person(k).homeid))
					universe.Map.Person(k).shophomerouteoption(i) = @dijkstra(universe.shoplist(i),CStr(universe.Map.Person(k).homeid))
					openfilecsv("routeofperson.csv",2,3)
					writefilecsv(2,universe.Map.Person(k).id,false)
					writefilecsv(2,i,false)
					writefilecsv(2,universe.situation,false)
					writefilecsv(2,universe.Map.Person(k).jobrouteoption(i),false)
					writefilecsv(2,universe.Map.Person(k).shoprouteoption(i),false)
					writefilecsv(2,universe.Map.Person(k).jobhomerouteoption(i),false)
					writefilecsv(2,universe.Map.Person(k).shophomerouteoption(i),true)
					closefilecsv(2)
				end if
				next i
		next k
	universe.recalculate = FALSE
end if

// 平日か休日か
if Int(cdbl(round(universe.day*1000)/1000)) mod 2 == 1 then
// 平日
	universe.daymode = 1
else
// 休日
	universe.daymode = 0
end if

universe.daytimecount = universe.daytimecount + 1
if universe.daymode == 1 then
	 universe.warpday = 15*((Int(cdbl(round(universe.day*1000)/1000))) - 1) + 21 
elseif universe.daymode == 0 then
	universe.warpday = 15*(Int(cdbl(round(universe.day*1000)/1000)))
end if

// 徴税や点検の処理に入るか否か
if Int(cdbl(round(gethistory(universe.warpday,1)*1000)/1000)) mod 360 == 351 and Int(cdbl(round(universe.warpday*1000)/1000)) mod 360 == 0 then
	universe.checkmode = TRUE
else
	universe.checkmode = FALSE
	universe.Map.government.bridgepeoplewatch = FALSE
end if
// 月々の処理を行うモード
if Int(cdbl(round(gethistory(universe.warpday,1)*1000)/1000)) mod 30 == 21 and int(cdbl(round(universe.warpday*1000)/1000)) mod 30 == 0 then
	universe.monthcheckmode = TRUE
	// csv書き込み
			openfilecsv("bridgetest"&universe.testnumber&".csv",2,3)
			for i = 0 to 10
writefilecsv(2,universe.simulationcode,false)
writefilecsv(2,universe.warpday,false)
writefilecsv(2,universe.Map.bridgecore(i).strength,false)
writefilecsv(2,universe.Map.bridgecore(i).demand,false)
writefilecsv(2,universe.Map.bridgecore(i).ID,false)
writefilecsv(2,universe.Map.bridgecore(i).collapse,false)
writefilecsv(2,universe.Map.bridgecore(i).repaircost,true)
	next i
closefilecsv(2)
openfilecsv("persontest"&universe.testnumber&".csv",2,3)
			for i = 0 to 99
writefilecsv(2,universe.simulationcode,false)
writefilecsv(2,universe.Map.Person(i).ID,false)
writefilecsv(2,universe.Map.Person(i).utilize,false)
writefilecsv(2,universe.Map.Person(i).timecount_sum,false)
writefilecsv(2,universe.Map.Person(i).freetime_sum,false)
writefilecsv(2,universe.Map.Person(i).consump_sum,false)
writefilecsv(2,universe.Map.Person(i).archivement,false)
writefilecsv(2,universe.warpday,false)
writefilecsv(2,universe.Map.Person(i).money,true)
	next i
closefilecsv(2)
openfilecsv("governtest"&universe.testnumber&".csv",2,3)
writefilecsv(2,universe.simulationcode,false)
writefilecsv(2,universe.warpday,false)
writefilecsv(2,universe.map.government.budget,false)
writefilecsv(2,universe.averageutilize,false)
writefilecsv(2,universe.averageconsump,false)
writefilecsv(2,universe.averagemovetime,false)
writefilecsv(2,universe.averagefreetime,true)
closefilecsv(2)
else
	universe.monthcheckmode = FALSE
end if
universe.averagefreetime = 0
universe.averagemovetime = 0
universe.averageconsump = 0
universe.averagearchive = 0
universe.averageutilize = 0

// 日付が変更されたか否か
if universe.numberofendagt == 100 then
	universe.daychange = TRUE
else
	universe.daychange = FALSE
end if

universe.day = 0
universe.numberofendagt = 0
}

Univ_Step_End{
if universe.daychange == TRUE then
	universe.daytimecount = 1
end if
if universe.warpday == 360 then
	exitsimulation()
end if

}

Univ_Finish{

}
#end_rule UNIVERSE




//-------------------------------------------------------
// Agent Rule
//-------------------------------------------------------
#begin_rule UNIVERSE.MAP.POINT
Agt_Init{
dim personAgt as agt
dim firstsight as string
dim i as integer
dim iid as integer

iid = my.ID

//最初の一回は必ずオフィス(一日目)
if rnd() < 0.16 then
		firstsight = 57
	elseif rnd() < 0.32 then
		firstsight = 112
	elseif rnd() < 0.48 then
		firstsight = 111
	elseif rnd() < 0.64 then
		firstsight = 64
	elseif rnd() < 0.8 then
		firstsight = 68
	else
		firstsight = 110
end if

If My.site == 1 Then
	for i = 0 to 4
		personAgt = createagt(universe.Map.Person)
		personAgt.x = my.X
		personAgt.y = my.Y
		personAgt.RouteArray = @dijkstra(my.id, CStr(firstsight))
		personAgt.returnroute = @dijkstra(firstsight,CStr(my.ID))
		personAgt.RouteCount = 1
	next i
end if

}

Agt_Step{
// siteが1なら家、2ならオフィス、3なら店
if my.site == 0 then
	my.color = COLOR_RED
elseif my.site == 1 then
	my.color = COLOR_BLUE
elseif my.site == 2 then
	my.color = COLOR_GREEN
elseif my.site == 3 then
	my.color = COLOR_CYAN
end if
}
#end_rule UNIVERSE.MAP.POINT




//-------------------------------------------------------
// Agent Rule
//-------------------------------------------------------
#begin_rule UNIVERSE.MAP.PERSON


Agt_Init{
dim k as integer
for k = 0 to 19
	if my.ID >= 5*k and my.ID <= 5*(k+1) - 1 then
		my.homeid = k
	end if
next k

my.Color = COLOR_BLUE
my.destination = 1
my.action = 1
my.check = 0
my.nowhome = 0
my.daycount = 1
my.speed = 1
// 初期資金は百万円から
my.money = 1000000
my.positiveline = my.money * (rnd()*3+2)
my.negativeline = my.money / (rnd()*3+2)
my.timecount = 0
my.timecount_sum = 0
my.freetime = 0
my.freetime_sum = 0
my.utilize = 0
my.consump = norminv(rnd(),9360,int(rnd()*1000) + 500)
my.potential = norminv(rnd(),14581,int(rnd()*1000) + 500)
my.freetime = norminv(rnd(),300,int(rnd()*50)+50)
my.archivement = my.potential
universe.averagearchive = universe.averagearchive + (my.archivement / 20)
my.archive_sum = 0

dim i as integer
// Get the all route from database
for i = 0 to 5
	// open table
	querydb("SELECT personid,listnumber,status,jobroute,shoproute,jobhomeroute,shophomeroute FROM personroute WHERE personid="&my.ID&" and listnumber = "&i&" and status  = 11111111111;")
	nextdb()
	my.jobrouteoption(i) = getvalueDB("jobroute")
	my.shoprouteoption(i) = getvalueDB("shoproute")
	my.jobhomerouteoption(i) = getvalueDB("jobhomeroute")
	my.shophomerouteoption(i) = getvalueDB("shophomeroute")
next i
}

Agt_Step{
	Dim targetPointAgt As Agt
	Dim distance As Double
	Dim lastTargetPointAgt As Agt
	Dim streetAgt As Agt
	dim set as agtset
	dim one as agt
	dim CNo as integer
	dim freetimestd as double
	dim movetimestd as double
	dim consumpstd as double
	dim i as integer

my.timecount = my.timecount + 1
universe.numberofendagt = universe.numberofendagt + my.nowhome
universe.day = universe.day + (my.daycount / countagt(universe.Map.Person))
universe.averagefreetime = universe.averagefreetime + (my.freetime_sum/ 100)
universe.averagemovetime= universe.averagemovetime + (my.timecount_sum / 100)
universe.averagearchive = universe.averagearchive + (my.archivement/ 100)
universe.averageconsump = universe.averageconsump + (my.consump_sum / 100)
// Calculate Utilize
// 平均値で割ってみる
if my.freetime_sum <= 0 then
	my.freetime_sum = 0 
end if
if my.timecount_sum <= 0 then
	my.timecount_sum = 0 
end if
if my.consump_sum <= 0 then
	my.consump_sum = 0 
end if
freetimestd = (((my.freetime_sum / 4557.138))) 
movetimestd = (((my.timecount_sum / 3032.69)))
consumpstd = (((my.consump_sum  / 153435.9)))
my.utilize = freetimestd ^ 0.33 + consumpstd ^ 0.33 - movetimestd ^ 0.33
universe.averageutilize = universe.averageutilize + (my.utilize / 100)

// 日数が30の倍数ならarchivementをmoneyに換算する
// 所得税の計算用に記録する
if universe.monthcheckmode == TRUE then
	my.money = my.money + my.archivement
	my.archive_sum = my.archive_sum + my.archivement
	my.archivement = 0
	my.freetime_sum = 0
	my.consump_sum = 0
	my.timecount_sum = 0
end if

// 進む速度の定義
makeoneagtsetaroundown(set,3,universe.Map.Person,false)
CNo = countagtset(set)
if CNo >= 1 then
	for each one in set
		if abs(one.direction - my.Direction) <> 180 then
			distance = measuredistance(my.X,my.y,one.x,one.y,universe.map)
			one.dist = distance
		end if
	next one
	
	// 一番近い距離の
	sortagtset(set,"dist",true)
	one = getagt(set,0)
	
	// 車間距離に応じたスピードの定義
	if abs(one.direction - my.Direction) == 180 then // 反対車線にいる場合は平均速度(2)で
		my.speed = 2
	else
		my.speed = 2*(tanh((one.dist-5)/3)+tanh(5/3)) //GithubのIssuesを参考に
	end if
elseif CNo == 0 then //誰もいないなら最高速度(60)で
	my.speed = 4
end if

//下限は0.2(10km/hのイメージ)
if my.speed <= 0.2 then
	my.speed = 0.2
end if

//ダイクストラ法に基づいて進む
if  universe.daychange == TRUE  then
	my.nowhome = 0
	targetPointAgt = Universe.Map.Point(CInt(GetToken(My.RouteArray, My.RouteCount)))
	my.daycount = my.daycount + 0.5
	if universe.daymode == 0 then
		shoproute(targetpointagt)
	else
		jobroute(targetpointagt)
	end if
end if
	If my.nowhome == 1  Then
		// 立ち止まる
		My.Color = COLOR_WHITE
		
		// 余暇時間とかの計測
		// 最後に帰宅したエージェントのstep数で基準化する
		my.timecount = 0
	ElseIf my.nowhome == 0 and My.RouteCount < CountToken(My.RouteArray) Then
		// 経路に沿って進む
		targetPointAgt = Universe.Map.Point(CInt(GetToken(My.RouteArray, My.RouteCount)))
		distance = Pursue(targetPointAgt, my.speed)
		
		If distance > 0 Then
			// 次のPointに到着したとき
			lastTargetPointAgt = Universe.Map.Point(CInt(GetToken(My.RouteArray, My.RouteCount)))
			My.RouteCount = My.RouteCount + 1
			If CountToken(My.RouteArray) > My.RouteCount Then
				targetPointAgt = Universe.Map.Point(CInt(GetToken(My.RouteArray, My.RouteCount)))
				streetAgt = @get_street_from_points(lastTargetPointAgt.ID, targetPointAgt.ID)
				If streetAgt.Cost >= 100000 Then
					// StreetのCostが10000の場合は経路を再探索する
					reroute(targetPointAgt)
					println("reroute"&my.ID)
				Else
					// 余剰分、次のPointへ向かう
					Pursue(targetPointAgt, distance)
				End If
			Else
				// 目的地に到着
				if my.action == 1 then
					// 店なら消費して効用を得る
					if universe.Map.Point(my.goalpointid).site == 3 then
					// 消費額と余暇時間は移動時間に応じて変化する
						if my.timecount <= 80 then
							my.consump_sum = my.consump_sum + my.consump*2*9
							my.money = my.money - my.consump*2*9
							my.freetime_sum = my.freetime_sum + my.freetime*2*9
						elseif my.timecount >= 120 then
							my.consump_sum = my.consump_sum + my.consump*0.5*9
							my.money = my.money - my.consump*0.5*9
							my.freetime_sum = my.freetime_sum + my.freetime*0.5*9
						else 
							my.consump_sum = my.consump_sum + my.consump*9
							my.money = my.money - my.consump*9
							my.freetime_sum = my.freetime_sum + my.freetime*9
						end if
					// オフィスなら将来受け取る成果を積み上げる
					elseif universe.Map.Point(my.goalpointid).site == 2 then
						my.archivement = my.archivement + my.potential*21
					end if
					my.action = 0
					my.check = 0
					homeroute(targetpointagt)
				// 帰宅し、明日に備える
				elseif my.action == 0 then
					my.action = 1
					my.check = 0
					my.nowhome = 1
					// 最後に帰宅したエージェントのstep数で基準化する
					my.timecount = (my.timecount / universe.daytimecount) * 200
					// 平日or休日？
					if universe.daymode == 1 then
						my.timecount_sum = my.timecount_sum + my.timecount	*	21
					else
						my.timecount_sum = my.timecount_sum * my.timecount * 9
					end if
					my.timecount = 0
				end if
			End If
		End If
	End If
}

// 経路を再探索する
Sub reroute(targetPointAgt As Agt)
{
	Dim startPointAgt As Agt
	Dim goalPointID As Integer
	Dim newRoute As String
	Dim lastRouteArray As String
	Dim i As Integer
	
	// 現在地点から経路を再探索する
	startPointAgt = Universe.Map.Point(CInt(GetToken(My.RouteArray, My.RouteCount - 1)))
	goalPointID = CInt(gettoken(my.RouteArray,counttoken(my.RouteArray)-1))
	newRoute = @dijkstra(startPointAgt.ID, CStr(goalPointID))
		
	lastRouteArray = My.RouteArray
	My.RouteArray = ""
	
	// これまでに通った経路を格納する
	For i=0 To My.RouteCount - 2
		My.RouteArray = My.RouteArray & GetToken(lastRouteArray, i) & ","
	Next i
	
	// 新しい経路を追加する
	My.RouteArray = My.RouteArray & newRoute
	
	// エージェントの色を変更する
	My.Color = COLOR_YELLOW
}

Sub homeroute(targetPointAgt As Agt)
{
	Dim startPointAgt As Agt
	Dim goalPointID As Integer
	Dim newRoute As String
	Dim lastRouteArray As String
	Dim i As Integer
	
	newRoute = my.returnroute
		
	my.RouteArray = ""
	My.Routecount = 0
	
	My.RouteArray = newRoute
	
	// エージェントの色を変更する
	My.Color = COLOR_YELLOW
}

Sub jobroute(targetPointAgt As Agt)
{
	Dim startPointID As Integer
	Dim goalPointID As Integer
	Dim newRoute As String
	Dim lastRouteArray As String
	Dim i As Integer
	dim m as integer
	
	// 現在地点から経路を再探索する
	// どのofficeに向かうかidによってあらかじめ決定される
	// 予め計算してある値を使用(jobrouteoption)
	if my.ID mod 6 == 0  then
		m = 0
	elseif  my.ID mod 6 == 1 then
		m = 1
	elseif  my.ID mod 6 == 2 then
		m = 2
	elseif  my.ID mod 6 == 3 then
		m = 3
	elseif my.ID mod 6 == 4 then
		m = 4
	else
		m = 5
	end if
	my.goalpointid = universe.officelist(m)
	newRoute = my.jobrouteoption(m)
	my.destination = 1
	my.returnroute = my.jobhomerouteoption(m)
	
	my.RouteArray = ""
	My.Routecount = 0
	
	My.RouteArray = newRoute
	
	// エージェントの色を変更する
	My.Color = COLOR_GREEN
}

Sub shoproute(targetPointAgt As Agt)
{
	Dim startPointID As Integer
	Dim goalPointID As Integer
	Dim newRoute As String
	Dim lastRouteArray As String
	Dim i As Integer
	dim m as integer
	
	// 現在地点から経路を再探索する
	// どのshopに向かうかをランダムに決める
	// 予め計算してある値を使用(shoprouteoption)
	if rnd() < 0.16 then
		m = 0
	elseif rnd() < 0.32 then
		m = 1
	elseif rnd() < 0.48 then
		m = 2
	elseif rnd() < 0.64 then
		m = 3
	elseif rnd() < 0.8 then
		m = 4
	else
		m = 5
	end if
	my.goalpointid = universe.shoplist(m)
	newRoute = my.shoprouteoption(m)
	my.destination = 2
	my.returnroute = my.shophomerouteoption(m)
		
	my.RouteArray = ""
	My.Routecount = 0
	
	My.RouteArray = newRoute
	
	// エージェントの色を変更する
	My.Color = COLOR_CYAN
}
#end_rule UNIVERSE.MAP.PERSON




//-------------------------------------------------------
// Agent Rule
//-------------------------------------------------------
#begin_rule UNIVERSE.MAP.GOVERNMENT
include "dijkstra.inc"

Agt_Init{
my.X = 25
my.Y = 25
my.budget = universe.univbudget * 100000000
my.bridgecount = 0
my.bridgepeoplewatch = FALSE
}

Agt_Step{
dim repairbridge as agtset
dim one as agt
dim blockagt as agt
dim set as agtset
dim i as integer
dim k as integer
dim p as integer
my.nowbridge = 0
for i = 0 to 10 
	if universe.Map.bridgecore(i).collapse == FALSE then
		my.nowbridge = my.nowbridge + 1
	end if
next i

for i = 0 to 10
	my.bridge_status(i) = universe.Map.bridgecore(i).strength
	my.bridge_demand(i) = universe.Map.bridgecore(i).demand
	my.bridge_averagedemand = my.bridge_averagedemand + my.bridge_demand(i) / my.nowbridge
	my.bridge_distance(i) = universe.Map.bridgecore(i).distance
next i

// 1年ごとに橋を点検(universeで日付と同期)
if universe.checkmode == TRUE and my.bridgepeoplewatch == FALSE then
// 期間ごとに徴税を行う
	for p = 0 to 19
		if universe.Map.Person(p).archive_sum <= 200000*12 then
			my.budget = my.budget +  universe.Map.Person(p).archive_sum * 0.05
			 universe.Map.Person(p).money = 
			 universe.Map.Person(p).money - universe.Map.Person(p).archive_sum * 0.05
		elseif universe.Map.Person(p).archive_sum <= 278700*12 then
			my.budget = my.budget +  universe.Map.Person(p).money * 0.15
			universe.Map.Person(p).money = 
			universe.Map.Person(p).money - universe.Map.Person(p).archive_sum * 0.15
		elseif universe.Map.Person(p).archive_sum <= 303600*12 then
			my.budget = my.budget +  universe.Map.Person(p).money * 0.25
			universe.Map.Person(p).money = 
			universe.Map.Person(p).money - universe.Map.Person(p).archive_sum * 0.25
		elseif universe.Map.Person(p).archive_sum <= 332300*12 then
			my.budget = my.budget +  universe.Map.Person(p).money * 0.35
			universe.Map.Person(p).money = 
			universe.Map.Person(p).money - universe.Map.Person(p).archive_sum * 0.35
		elseif universe.Map.Person(p).archive_sum <= 400000*12 then
			my.budget = my.budget +  universe.Map.Person(p).money * 0.45
			universe.Map.Person(p).money = 
			universe.Map.Person(p).money - universe.Map.Person(p).archive_sum * 0.45
		else
			my.budget = my.budget +  universe.Map.Person(p).money * 0.5
			universe.Map.Person(p).money = 
			universe.Map.Person(p).money - universe.Map.Person(p).archive_sum * 0.5
		end if
	universe.Map.Person(p).archive_sum = 0
	next p
// 危険域にある橋の数を数えてエージェントセット内に入れる
	for i = 0 to 10	
	if universe.Map.bridgecore(i).strength <= universe.threshold and universe.Map.bridgecore(i).collapse == FALSE then
		addagt(repairbridge,universe.Map.bridgecore(i))
		my.bridgecount = my.bridgecount + 1
	end if
	next i
	// 耐久値が低い順に並び替える
	sortagtset(repairbridge,"strength",true)
	if my.bridgecount > 0 then
	for i = 0 to (my.bridgecount - 1)
	one = getagt(repairbridge,i)
// 危険域にある橋の需要値が(今は平均の半分以上なら)なら橋の耐久値を全て回復し、橋内部の時間を0に戻す。予算が足りなくなった時点で修復を終了する。これは耐久値シナリオでは外す条件です
			if my.budget >= one.repaircost then
				my.budget = my.budget - one.repaircost
				one.strength = 1
				one.bridgetime = 0
				one.collapseflag = FALSE
				update_cost(one.beginpointid,one.endpointid,one.distance)
				println(one.id&" is repaired")
// 予算が足りず修復できなかった橋の耐久値がlimit以下なら橋を通れなくする
		elseif one.strength <= universe.strengthlimit and one.collapse == FALSE or one.collapseflag == TRUE then
			update_cost(one.beginpointid,one.endpointid,1000000)
			println(one.id&" is clashed")
			one.collapse = TRUE
			one.sign = 0
			one.collapseflag = FALSE
			my.collapsebridge = 1
		end if
	one.demand = 0
	next i
	for i = 0 to 10
		universe.Map.bridgecore(i).demand = 0
		my.bridge_status(i) = 0
		my.bridge_demand(i) = 0
		my.bridge_averagedemand = 0
	next i
		if my.collapsebridge == 1 then
			universe.situation = universe.Map.bridgecore(0).sign&universe.Map.bridgecore(1).sign&universe.Map.bridgecore(2).sign&
universe.Map.bridgecore(3).sign&universe.Map.bridgecore(4).sign&universe.Map.bridgecore(5).sign&universe.Map.bridgecore(6).sign&universe.Map.bridgecore(7).sign&universe.Map.bridgecore(8).sign&universe.Map.bridgecore(9).sign&universe.Map.bridgecore(10).sign
			// 人々エージェントに再計算させる
			universe.recalculate = TRUE
			my.collapsebridge = 0
		end if
		my.bridgecount = 0
	end if
	my.bridgepeoplewatch = TRUE
end if
}
#end_rule UNIVERSE.MAP.GOVERNMENT




//-------------------------------------------------------
// Agent Rule
//-------------------------------------------------------
#begin_rule UNIVERSE.MAP.BRIDGECORE
include"dijkstra.inc"

Agt_Init{
MY.sign = "1"
my.demand = 0
my.collapse = FALSE
my.collapseflag = FALSE
// 橋の残存年数は最初から決める

// 橋の長さから初期費用を決定する
my.iron = 55 * exp(0.03 * my.length) * 0.01
my.value = my.length * my.iron * 12 * 60 * 10000

my.strength = (1-(1/(1+1000000*exp((-0.0011)*((my.bridgetime)/150)))))

dim streetagt as agt
dim streetagtset as agtset
dim i as integer

MakeAgtSet(streetAgtSet, Universe.Street)
	For Each streetAgt In streetAgtSet
		for i = 0 to 10
		if streetAgt.Points == universe.Map.bridgecore(i).beginpointid&","&universe.Map.bridgecore(i).endpointid then
			my.distance = streetagt.Cost
		end if
		next i
	Next streetAgt
}

Agt_Step{
dim set as agtset
dim blockset as agtset
dim one as agt
dim blockagt as agt
my.transport = 0

// 平日or休日？
if universe.daymode == 1then
	my.bridgetime = my.bridgetime + 21
elseif universe.daymode == 0 then
	my.bridgetime = my.bridgetime +9
end if

// 平日or休日？
if universe.daymode == 1 then
	my.nextdamage = (1-(1/(1+1000000*exp(-0.0011*((my.bridgetime)/150))))) - (1-(1/(1+1000000*exp(-0.0011*((my.bridgetime - 21)/150)))))
else
	my.nextdamage = (1-(1/(1+1000000*exp(-0.0011*((my.bridgetime)/150))))) - (1-(1/(1+1000000*exp(-0.0011*((my.bridgetime - 9)/150)))))
end if
// personが来たらdemand(寄与度)を増加させる
makeoneagtsetaroundown(set,2,universe.Map.Person,false)
for each one in set
	if one.check == 0 then
		// エージェントの目的に合わせて取得する値を変更する
		if one.destination == 1 then
			my.demand = my.demand + one.potential * 21
		elseif one.destination == 2 then
			my.demand = my.demand + one.consump * 9
		end if
		// 平日or休日？
		if universe.daymode == 1 then
			my.transport = my.transport + 0.000001 * 21
		else
			my.transport = my.transport + 0.000001 * 9
		end if
		one.speed = one.speed / countagtset(set)
		one.check = 1
	end if
next one
my.strength = my.strength + my.nextdamage - my.transport
my.repaircost = my.value * (1 - my.strength)
// 耐久値が負になったら無条件で次の点検時に通行止めにする
if my.strength <= 0 and my.collapse == FALSE and my.collapseflag == FALSE then
	my.strength = 0
	my.collapseflag = TRUE
	update_cost(my.beginpointid,my.endpointid,1000000)
	println(my.ID&" is naturally clashed")
end if
if my.collapse == true then
	my.strength = 0
	my.collapseflag = FALSE
end if
}
#end_rule UNIVERSE.MAP.BRIDGECORE




//-------------------------------------------------------
// Agent Rule
//-------------------------------------------------------
#begin_rule UNIVERSE.LINK
Agt_Init{

}

Agt_Step{

}
#end_rule UNIVERSE.LINK




//-------------------------------------------------------
// Agent Rule
//-------------------------------------------------------
#begin_rule UNIVERSE.STREET
Agt_Init{

}

Agt_Step{

}
#end_rule UNIVERSE.STREET




//-------------------------------------------------------
// Agent Rule
//-------------------------------------------------------
#begin_rule UNIVERSE.DIJKSTRASTREET
Agt_Init{

}

Agt_Step{

}
#end_rule UNIVERSE.DIJKSTRASTREET




//-------------------------------------------------------
// Agent Rule
//-------------------------------------------------------
#begin_rule UNIVERSE.STREETBACKUP
Agt_Init{

}

Agt_Step{

}
#end_rule UNIVERSE.STREETBACKUP




//-------------------------------------------------------
// Agent Rule
//-------------------------------------------------------
#begin_rule UNIVERSE.POINTBACKUP
Agt_Init{

}

Agt_Step{

}
#end_rule UNIVERSE.POINTBACKUP




//-------------------------------------------------------
// Simulation Definition Division
//-------------------------------------------------------
Single_Simulation {
    Step_Max = 0;
    Time_Max = 0;
    End_Condition = "";
    Exec_Wait = 1;
    Exec_Order = Component;
    Exec_Order_Random_First_Step_Only = No;
    Random_Seed = 0;
    Redraw_Timing = Step;
    Redraw_Interval = 1;
    Garbage_Interval = 0;
}


//-------------------------------------------------------
// Simulation Loop Definition Division
//-------------------------------------------------------
Repeat_Simulation {
    Value_Change = None;
    Initial_Value_Change_None {
        Repeat_Max = 1;
    }
}


//-------------------------------------------------------
// Executing Order By Agent Component Definition Division
//-------------------------------------------------------
Executing_Order_Component {
    Component_Priority = "Universe.Map.government", 1;
    Component_Priority = "Universe.Map.bridgecore", 1;
    Component_Priority = "Universe.Map.Point", 1;
    Component_Priority = "Universe.Link", 2;
    Component_Priority = "Universe.Street", 2;
    Component_Priority = "Universe.DijkstraStreet", 2;
    Component_Priority = "Universe.StreetBackup", 2;
    Component_Priority = "Universe.PointBackup", 2;
    Component_Priority = "Universe.Map.Person", 3;
}


//-------------------------------------------------------
// 2 Dimension Map Display Definition Division
//-------------------------------------------------------
Map_Output {
    Map_Space_Name = "Universe.Map";
    Map_Name = "Map";
    Title = "Map";
    Disable = No;
    Background_Color = 255, 255, 255;
    Position_x = 903;
    Position_y = 6;
    Size_x = 542;
    Size_y = 470;
    Remarks = No;
    Map_Cell_Size = 13;
    Legend_Pos = Top;
    Font_Name = "Dialog";
    Font_Char_Set = 81;
    Font_Size = 12.0;
    Font_Style = 0;
    Font_Color = 0, 0, 0;
    Font_Background_Color = 255, 255, 255;
    FastDraw = Yes;
    Draw_Timing = Simulation_Step;
    Draw_Interval = 1;
    Axis_Label = "", "";
    Draw_Range = 0, 0, 50, 50;
    Ruled_Line = No;
    Text_Display = No;
    Text_Display_Variable_Name = "";
    Chess_Type_Display_Position = Yes;
    Background_Transparent = No;
    Target_Layer = 0;
    Coordinate_Display = No;
    Space_Kind = Square_2D;
    BG_Pict = No;
    BG_Type = 0;
    BG_Var_Name = "";
    BG_File_Name = "map.jpg";
    Origin_Position = 2;
    Output_Group_Name = "";
    Output {
        Map_Element_Name = "Point";
        Map_Element = Agent_Variable;
        Output_Expression = "Universe.Map.Point";
        Draw_Line = Yes;
        Collection_Name = "Universe.Map.Point.NearAgtSet";
        Line_Type = 1;
        Line_Arrow = 1;
        Line_Width = 1;
        Line_Color = 0, 255, 51;
        Line_Type_Variable = "";
        Line_Arrow_Variable = "";
        Line_Width_Variable = "";
        Line_Color_Variable = "";
        Agent_Color = "Universe.Map.Point.color";
        Marker_Id = 1;
        Effective_Figures = 0;
        Format_Id = 0;
        Agent_Image_Direction = No;
        Icon_Type = 0;
        Icon_Var_Name = "";
        Icon_Transparent = No;
        Icon_Enlarg_Reduce = No;
        Icon_File_Name = "";
        Num_Display = Yes;
        Num_Var_Name = "Universe.Map.Point.ID";
        Agent_Image_Magnify_by_value = Yes;
        Agent_Image_Magnify_Value = 1.0;
        Agent_Image_Magnify_Variable_Name = "Universe.Map.Point.ID";
        Agent_Image_Transparency_by_value = Yes;
        Agent_Image_Transparency_Value = 0.0;
        Agent_Image_Transparency_Variable_Name = "Universe.Map.Point.ID";
    }
    Output {
        Map_Element_Name = "Person";
        Map_Element = Agent_Variable;
        Output_Expression = "Universe.Map.Person";
        Draw_Line = No;
        Collection_Name = "";
        Line_Type = 0;
        Line_Arrow = 0;
        Line_Width = 0;
        Line_Color = 0, 0, 0;
        Line_Type_Variable = "";
        Line_Arrow_Variable = "";
        Line_Width_Variable = "";
        Line_Color_Variable = "";
        Agent_Color = "Universe.Map.Person.Color";
        Marker_Id = 1;
        Effective_Figures = 0;
        Format_Id = 0;
        Agent_Image_Direction = No;
        Icon_Type = 0;
        Icon_Var_Name = "";
        Icon_Transparent = No;
        Icon_Enlarg_Reduce = No;
        Icon_File_Name = "";
        Num_Display = Yes;
        Num_Var_Name = "Universe.Map.Person.check";
        Agent_Image_Magnify_by_value = Yes;
        Agent_Image_Magnify_Value = 1.0;
        Agent_Image_Magnify_Variable_Name = "Universe.Map.Person.ID";
        Agent_Image_Transparency_by_value = Yes;
        Agent_Image_Transparency_Value = 0.0;
        Agent_Image_Transparency_Variable_Name = "Universe.Map.Person.ID";
    }
    Output {
        Map_Element_Name = "government";
        Map_Element = Agent_Variable;
        Output_Expression = "Universe.Map.government";
        Draw_Line = No;
        Collection_Name = "";
        Line_Type = 0;
        Line_Arrow = 0;
        Line_Width = 0;
        Line_Color = 0, 0, 0;
        Line_Type_Variable = "";
        Line_Arrow_Variable = "";
        Line_Width_Variable = "";
        Line_Color_Variable = "";
        Agent_Color = 0,0,0;
        Marker_Id = 1;
        Effective_Figures = 0;
        Format_Id = 0;
        Agent_Image_Direction = No;
        Icon_Type = 0;
        Icon_Var_Name = "";
        Icon_Transparent = No;
        Icon_Enlarg_Reduce = No;
        Icon_File_Name = "";
        Num_Display = No;
        Num_Var_Name = "";
        Agent_Image_Magnify_by_value = Yes;
        Agent_Image_Magnify_Value = 1.1;
        Agent_Image_Magnify_Variable_Name = "Universe.Map.government.ID";
        Agent_Image_Transparency_by_value = Yes;
        Agent_Image_Transparency_Value = 0.0;
        Agent_Image_Transparency_Variable_Name = "Universe.Map.government.ID";
    }
    Output {
        Map_Element_Name = "bridgecore";
        Map_Element = Agent_Variable;
        Output_Expression = "Universe.Map.bridgecore";
        Draw_Line = No;
        Collection_Name = "";
        Line_Type = 0;
        Line_Arrow = 0;
        Line_Width = 0;
        Line_Color = 0, 0, 0;
        Line_Type_Variable = "";
        Line_Arrow_Variable = "";
        Line_Width_Variable = "";
        Line_Color_Variable = "";
        Agent_Color = 255,0,204;
        Marker_Id = 1;
        Effective_Figures = 0;
        Format_Id = 0;
        Agent_Image_Direction = No;
        Icon_Type = 0;
        Icon_Var_Name = "";
        Icon_Transparent = No;
        Icon_Enlarg_Reduce = No;
        Icon_File_Name = "";
        Num_Display = No;
        Num_Var_Name = "Universe.Map.bridgecore.ID";
        Agent_Image_Magnify_by_value = Yes;
        Agent_Image_Magnify_Value = 1.0;
        Agent_Image_Magnify_Variable_Name = "Universe.Map.bridgecore.ID";
        Agent_Image_Transparency_by_value = Yes;
        Agent_Image_Transparency_Value = 0.0;
        Agent_Image_Transparency_Variable_Name = "Universe.Map.bridgecore.ID";
    }
}


//-------------------------------------------------------
// Time Graph Output Definition Division
//-------------------------------------------------------
Time_Graph {
    Font_Name = "Dialog";
    Font_Char_Set = 81;
    Font_Size = 12.0;
    Font_Style = 0;
    Font_Color = 0, 0, 0;
    Font_Background_Color = 255, 255, 255;
    Draw_Timing = Simulation_Step;
    Draw_Interval = 1;
    Graph_Name = "bridgecore";
    Title = "core";
    Disable = Yes;
    Background_Color = 255, 255, 255;
    Remarks = Yes;
    Legend_Pos = Top;
    FastDraw = No;
    Position_x = 448;
    Position_y = 197;
    Size_x = 735;
    Size_y = 658;
    Map_Cell_Size = -1;
    Axis_Label = "", "";
    Draw_By_JFree_Chart = Yes;
    Scale = 0, 0.0, 1000, 100.0, 100, 10.0;
    ScaleAuto = Yes, Yes;
    Output_Group_Name = "";
    Output {
        Graph_Element_Name = "core1";
        Line_Color = 255, 0, 0;
        Line_Width = 2;
        Marker_Id = 0;
        Output_Expression = "universe.Map.bridgecore(0).demand";
        Expression_Value_Display = No;
        Effective_Fraction_Figures = 0;
        Graph_Element_Color = (0, 255, 0);
    }
    Output {
        Graph_Element_Name = "core2";
        Line_Color = 0, 0, 255;
        Line_Width = 2;
        Marker_Id = 0;
        Output_Expression = "universe.Map.bridgecore(1).demand";
        Expression_Value_Display = No;
        Effective_Fraction_Figures = 0;
        Graph_Element_Color = (255, 255, 0);
    }
    Output {
        Graph_Element_Name = "core3";
        Line_Color = 0, 255, 0;
        Line_Width = 2;
        Marker_Id = 0;
        Output_Expression = "universe.Map.bridgecore(2).demand";
        Expression_Value_Display = No;
        Effective_Fraction_Figures = 0;
        Graph_Element_Color = (255, 102, 0);
    }
    Output {
        Graph_Element_Name = "core4";
        Line_Color = 255, 0, 255;
        Line_Width = 2;
        Marker_Id = 0;
        Output_Expression = "universe.Map.bridgecore(3).demand";
        Expression_Value_Display = No;
        Effective_Fraction_Figures = 0;
        Graph_Element_Color = (255, 0, 0);
    }
    Output {
        Graph_Element_Name = "core5";
        Line_Color = 0, 255, 255;
        Line_Width = 2;
        Marker_Id = 0;
        Output_Expression = "universe.Map.bridgecore(4).demand";
        Expression_Value_Display = No;
        Effective_Fraction_Figures = 0;
        Graph_Element_Color = (255, 0, 255);
    }
    Output {
        Graph_Element_Name = "core6";
        Line_Color = 255, 255, 0;
        Line_Width = 2;
        Marker_Id = 0;
        Output_Expression = "universe.Map.bridgecore(5).demand";
        Expression_Value_Display = No;
        Effective_Fraction_Figures = 0;
        Graph_Element_Color = (0, 0, 255);
    }
    Output {
        Graph_Element_Name = "core7";
        Line_Color = 128, 128, 128;
        Line_Width = 2;
        Marker_Id = 0;
        Output_Expression = "universe.Map.bridgecore(6).demand";
        Expression_Value_Display = No;
        Effective_Fraction_Figures = 0;
        Graph_Element_Color = (153, 153, 153);
    }
    Output {
        Graph_Element_Name = "core8";
        Line_Color = 255, 0, 0;
        Line_Width = 2;
        Marker_Id = 0;
        Output_Expression = "universe.Map.bridgecore(7).demand";
        Expression_Value_Display = No;
        Effective_Fraction_Figures = 0;
        Graph_Element_Color = (0, 102, 102);
    }
    Output {
        Graph_Element_Name = "core9";
        Line_Color = 128, 128, 128;
        Line_Width = 2;
        Marker_Id = 0;
        Output_Expression = "universe.Map.bridgecore(8).demand";
        Expression_Value_Display = No;
        Effective_Fraction_Figures = 0;
        Graph_Element_Color = (0, 153, 153);
    }
    Output {
        Graph_Element_Name = "core10";
        Line_Color = 255, 255, 0;
        Line_Width = 2;
        Marker_Id = 0;
        Output_Expression = "universe.Map.bridgecore(9).demand";
        Expression_Value_Display = No;
        Effective_Fraction_Figures = 0;
        Graph_Element_Color = (51, 51, 51);
    }
    Output {
        Graph_Element_Name = "core11";
        Line_Color = 128, 128, 128;
        Line_Width = 2;
        Marker_Id = 0;
        Output_Expression = "universe.Map.bridgecore(10).demand";
        Expression_Value_Display = No;
        Effective_Fraction_Figures = 0;
        Graph_Element_Color = (51, 255, 255);
    }
}


//-------------------------------------------------------
// Time Graph Output Definition Division
//-------------------------------------------------------
Time_Graph {
    Font_Name = "Dialog";
    Font_Char_Set = 81;
    Font_Size = 12.0;
    Font_Style = 0;
    Font_Color = 0, 0, 0;
    Font_Background_Color = 255, 255, 255;
    Draw_Timing = Simulation_Step;
    Draw_Interval = 1;
    Graph_Name = "endagt";
    Title = "end agt";
    Disable = Yes;
    Background_Color = 255, 255, 255;
    Remarks = Yes;
    Legend_Pos = Top;
    FastDraw = No;
    Position_x = 768;
    Position_y = 125;
    Size_x = 536;
    Size_y = 502;
    Map_Cell_Size = -1;
    Axis_Label = "", "";
    Draw_By_JFree_Chart = Yes;
    Scale = 0, 0.0, 1000, 100.0, 100, 10.0;
    ScaleAuto = Yes, Yes;
    Output_Group_Name = "";
    Output {
        Graph_Element_Name = "end agt";
        Line_Color = 0, 0, 255;
        Line_Width = 2;
        Marker_Id = 0;
        Output_Expression = "universe.numberofendagt";
        Expression_Value_Display = No;
        Effective_Fraction_Figures = 0;
        Graph_Element_Color = (0, 255, 0);
    }
}


//-------------------------------------------------------
// Time Graph Output Definition Division
//-------------------------------------------------------
Time_Graph {
    Font_Name = "Dialog";
    Font_Char_Set = 81;
    Font_Size = 12.0;
    Font_Style = 0;
    Font_Color = 0, 0, 0;
    Font_Background_Color = 255, 255, 255;
    Draw_Timing = Simulation_Step;
    Draw_Interval = 1;
    Graph_Name = "time";
    Title = "time";
    Disable = Yes;
    Background_Color = 255, 255, 255;
    Remarks = Yes;
    Legend_Pos = Top;
    FastDraw = No;
    Position_x = 283;
    Position_y = 274;
    Size_x = 610;
    Size_y = 280;
    Map_Cell_Size = -1;
    Axis_Label = "", "";
    Draw_By_JFree_Chart = Yes;
    Scale = 0, 0.0, 1000, 100.0, 100, 10.0;
    ScaleAuto = Yes, Yes;
    Output_Group_Name = "";
    Output {
        Graph_Element_Name = "timecount";
        Line_Color = 0, 255, 0;
        Line_Width = 2;
        Marker_Id = 0;
        Output_Expression = "universe.Map.Person(0).timecount";
        Expression_Value_Display = No;
        Effective_Fraction_Figures = 0;
        Graph_Element_Color = (0, 102, 204);
    }
    Output {
        Graph_Element_Name = "freetime";
        Line_Color = 255, 255, 0;
        Line_Width = 2;
        Marker_Id = 0;
        Output_Expression = "universe.Map.Person(0).freetime";
        Expression_Value_Display = No;
        Effective_Fraction_Figures = 0;
        Graph_Element_Color = (255, 153, 153);
    }
    Output {
        Graph_Element_Name = "daycount";
        Line_Color = 0, 255, 0;
        Line_Width = 2;
        Marker_Id = 0;
        Output_Expression = "universe.daytimecount";
        Expression_Value_Display = No;
        Effective_Fraction_Figures = 0;
        Graph_Element_Color = (0, 255, 0);
    }
}


//-------------------------------------------------------
// Time Graph Output Definition Division
//-------------------------------------------------------
Time_Graph {
    Font_Name = "Dialog";
    Font_Char_Set = 81;
    Font_Size = 12.0;
    Font_Style = 0;
    Font_Color = 0, 0, 0;
    Font_Background_Color = 255, 255, 255;
    Draw_Timing = Simulation_Step;
    Draw_Interval = 1;
    Graph_Name = "daycount";
    Title = "daycount";
    Disable = Yes;
    Background_Color = 255, 255, 255;
    Remarks = Yes;
    Legend_Pos = Top;
    FastDraw = No;
    Position_x = 0;
    Position_y = 0;
    Size_x = 1062;
    Size_y = 856;
    Map_Cell_Size = -1;
    Axis_Label = "", "";
    Draw_By_JFree_Chart = Yes;
    Scale = 0, 0.0, 1000, 100.0, 100, 10.0;
    ScaleAuto = Yes, Yes;
    Output_Group_Name = "";
    Output {
        Graph_Element_Name = "freetimesum";
        Line_Color = 255, 0, 255;
        Line_Width = 2;
        Marker_Id = 0;
        Output_Expression = "universe.Map.Person(0).freetime_sum";
        Expression_Value_Display = No;
        Effective_Fraction_Figures = 0;
        Graph_Element_Color = (0, 255, 0);
    }
    Output {
        Graph_Element_Name = "movetimesum";
        Line_Color = 0, 255, 255;
        Line_Width = 2;
        Marker_Id = 0;
        Output_Expression = "universe.Map.Person(0).timecount_sum";
        Expression_Value_Display = No;
        Effective_Fraction_Figures = 0;
        Graph_Element_Color = (51, 102, 0);
    }
}


//-------------------------------------------------------
// Time Graph Output Definition Division
//-------------------------------------------------------
Time_Graph {
    Font_Name = "Dialog";
    Font_Char_Set = 81;
    Font_Size = 12.0;
    Font_Style = 0;
    Font_Color = 0, 0, 0;
    Font_Background_Color = 255, 255, 255;
    Draw_Timing = Simulation_Step;
    Draw_Interval = 1;
    Graph_Name = "day";
    Title = "day";
    Disable = Yes;
    Background_Color = 255, 255, 255;
    Remarks = Yes;
    Legend_Pos = Top;
    FastDraw = Yes;
    Position_x = 382;
    Position_y = 249;
    Size_x = 758;
    Size_y = 618;
    Map_Cell_Size = -1;
    Axis_Label = "", "";
    Draw_By_JFree_Chart = Yes;
    Scale = 0, 0.0, 1000, 100.0, 100, 10.0;
    ScaleAuto = Yes, Yes;
    Output_Group_Name = "";
    Output {
        Graph_Element_Name = "day";
        Line_Color = 255, 0, 0;
        Line_Width = 2;
        Marker_Id = 0;
        Output_Expression = "universe.day";
        Expression_Value_Display = No;
        Effective_Fraction_Figures = 0;
        Graph_Element_Color = (0, 255, 0);
    }
}


//-------------------------------------------------------
// Time Graph Output Definition Division
//-------------------------------------------------------
Time_Graph {
    Font_Name = "Dialog";
    Font_Char_Set = 81;
    Font_Size = 12.0;
    Font_Style = 0;
    Font_Color = 0, 0, 0;
    Font_Background_Color = 255, 255, 255;
    Draw_Timing = Simulation_Step;
    Draw_Interval = 1;
    Graph_Name = "money";
    Title = "money";
    Disable = Yes;
    Background_Color = 255, 255, 255;
    Remarks = Yes;
    Legend_Pos = Top;
    FastDraw = No;
    Position_x = 417;
    Position_y = -14;
    Size_x = 500;
    Size_y = 300;
    Map_Cell_Size = -1;
    Axis_Label = "", "";
    Draw_By_JFree_Chart = Yes;
    Scale = 0, 0.0, 1000, 100.0, 100, 10.0;
    ScaleAuto = Yes, Yes;
    Output_Group_Name = "";
    Output {
        Graph_Element_Name = "consump";
        Line_Color = 255, 0, 0;
        Line_Width = 2;
        Marker_Id = 0;
        Output_Expression = "universe.averageconsump";
        Expression_Value_Display = No;
        Effective_Fraction_Figures = 0;
        Graph_Element_Color = (0, 255, 0);
    }
    Output {
        Graph_Element_Name = "archive";
        Line_Color = 0, 0, 255;
        Line_Width = 2;
        Marker_Id = 0;
        Output_Expression = "universe.averagearchive";
        Expression_Value_Display = No;
        Effective_Fraction_Figures = 0;
        Graph_Element_Color = (102, 0, 0);
    }
}


//-------------------------------------------------------
// Time Graph Output Definition Division
//-------------------------------------------------------
Time_Graph {
    Font_Name = "Dialog";
    Font_Char_Set = 81;
    Font_Size = 12.0;
    Font_Style = 0;
    Font_Color = 0, 0, 0;
    Font_Background_Color = 255, 255, 255;
    Draw_Timing = Simulation_Step;
    Draw_Interval = 1;
    Graph_Name = "utilize";
    Title = "utilize";
    Disable = No;
    Background_Color = 255, 255, 255;
    Remarks = Yes;
    Legend_Pos = Top;
    FastDraw = No;
    Position_x = 100;
    Position_y = 99;
    Size_x = 500;
    Size_y = 300;
    Map_Cell_Size = -1;
    Axis_Label = "", "";
    Draw_By_JFree_Chart = Yes;
    Scale = 0, 0.0, 1000, 100.0, 100, 10.0;
    ScaleAuto = Yes, Yes;
    Output_Group_Name = "";
    Output {
        Graph_Element_Name = "utilize";
        Line_Color = 255, 0, 0;
        Line_Width = 2;
        Marker_Id = 0;
        Output_Expression = "universe.averageutilize";
        Expression_Value_Display = No;
        Effective_Fraction_Figures = 0;
        Graph_Element_Color = (0, 255, 0);
    }
    Output {
        Graph_Element_Name = "1utilize";
        Line_Color = 0, 0, 255;
        Line_Width = 2;
        Marker_Id = 0;
        Output_Expression = "universe.Map.Person(1).utilize";
        Expression_Value_Display = No;
        Effective_Fraction_Figures = 0;
        Graph_Element_Color = (153, 0, 153);
    }
}


//-------------------------------------------------------
// Time Graph Output Definition Division
//-------------------------------------------------------
Time_Graph {
    Font_Name = "Dialog";
    Font_Char_Set = 81;
    Font_Size = 12.0;
    Font_Style = 0;
    Font_Color = 0, 0, 0;
    Font_Background_Color = 255, 255, 255;
    Draw_Timing = Simulation_Step;
    Draw_Interval = 1;
    Graph_Name = "strength";
    Title = "strength";
    Disable = Yes;
    Background_Color = 255, 255, 255;
    Remarks = Yes;
    Legend_Pos = Top;
    FastDraw = No;
    Position_x = -204;
    Position_y = 435;
    Size_x = 1313;
    Size_y = 520;
    Map_Cell_Size = -1;
    Axis_Label = "", "";
    Draw_By_JFree_Chart = Yes;
    Scale = 0, 0.0, 1000, 100.0, 100, 10.0;
    ScaleAuto = Yes, Yes;
    Output_Group_Name = "";
    Output {
        Graph_Element_Name = "core5";
        Line_Color = 0, 255, 0;
        Line_Width = 2;
        Marker_Id = 0;
        Output_Expression = "universe.Map.bridgecore(5).strength";
        Expression_Value_Display = No;
        Effective_Fraction_Figures = 0;
        Graph_Element_Color = (0, 255, 0);
    }
    Output {
        Graph_Element_Name = "core0";
        Line_Color = 0, 255, 0;
        Line_Width = 2;
        Marker_Id = 0;
        Output_Expression = "universe.Map.bridgecore(0).strength";
        Expression_Value_Display = No;
        Effective_Fraction_Figures = 0;
        Graph_Element_Color = (0, 0, 0);
    }
    Output {
        Graph_Element_Name = "core1";
        Line_Color = 255, 0, 255;
        Line_Width = 2;
        Marker_Id = 0;
        Output_Expression = "universe.Map.bridgecore(1).strength";
        Expression_Value_Display = No;
        Effective_Fraction_Figures = 0;
        Graph_Element_Color = (0, 153, 153);
    }
    Output {
        Graph_Element_Name = "core2";
        Line_Color = 0, 255, 255;
        Line_Width = 2;
        Marker_Id = 0;
        Output_Expression = "universe.Map.bridgecore(2).strength";
        Expression_Value_Display = No;
        Effective_Fraction_Figures = 0;
        Graph_Element_Color = (51, 204, 255);
    }
    Output {
        Graph_Element_Name = "core3";
        Line_Color = 255, 255, 0;
        Line_Width = 2;
        Marker_Id = 0;
        Output_Expression = "universe.Map.bridgecore(3).strength";
        Expression_Value_Display = No;
        Effective_Fraction_Figures = 0;
        Graph_Element_Color = (102, 102, 255);
    }
    Output {
        Graph_Element_Name = "core4";
        Line_Color = 128, 128, 128;
        Line_Width = 2;
        Marker_Id = 0;
        Output_Expression = "universe.Map.bridgecore(4).strength";
        Expression_Value_Display = No;
        Effective_Fraction_Figures = 0;
        Graph_Element_Color = (204, 204, 255);
    }
    Output {
        Graph_Element_Name = "core6";
        Line_Color = 0, 255, 0;
        Line_Width = 2;
        Marker_Id = 0;
        Output_Expression = "universe.Map.bridgecore(6).strength";
        Expression_Value_Display = No;
        Effective_Fraction_Figures = 0;
        Graph_Element_Color = (0, 255, 0);
    }
    Output {
        Graph_Element_Name = "core7";
        Line_Color = 0, 255, 0;
        Line_Width = 2;
        Marker_Id = 0;
        Output_Expression = "universe.Map.bridgecore(7).strength";
        Expression_Value_Display = No;
        Effective_Fraction_Figures = 0;
        Graph_Element_Color = (0, 255, 0);
    }
    Output {
        Graph_Element_Name = "core8";
        Line_Color = 0, 255, 0;
        Line_Width = 2;
        Marker_Id = 0;
        Output_Expression = "universe.Map.bridgecore(8).strength";
        Expression_Value_Display = No;
        Effective_Fraction_Figures = 0;
        Graph_Element_Color = (0, 255, 0);
    }
    Output {
        Graph_Element_Name = "core9";
        Line_Color = 0, 255, 0;
        Line_Width = 2;
        Marker_Id = 0;
        Output_Expression = "universe.Map.bridgecore(9).strength";
        Expression_Value_Display = No;
        Effective_Fraction_Figures = 0;
        Graph_Element_Color = (0, 255, 0);
    }
    Output {
        Graph_Element_Name = "core10";
        Line_Color = 0, 255, 0;
        Line_Width = 2;
        Marker_Id = 0;
        Output_Expression = "universe.Map.bridgecore(10).strength";
        Expression_Value_Display = No;
        Effective_Fraction_Figures = 0;
        Graph_Element_Color = (0, 255, 0);
    }
}


//-------------------------------------------------------
// Numeric Data Window Output Definition Division
//-------------------------------------------------------
Numeric_Output {
    Font_Name = "Dialog";
    Font_Char_Set = 81;
    Font_Size = 12.0;
    Font_Style = 0;
    Font_Color = 0, 0, 0;
    Font_Background_Color = 255, 255, 255;
    Position_x = 613;
    Position_y = 6;
    Size_x = 253;
    Size_y = 607;
    Map_Cell_Size = -1;
    Numeric_Name = "day.etc";
    Title = "day.etc";
    Disable = No;
    Output_Group_Name = "";
    OUTPUT {
        Output_Element_Name = "day";
        Figures = 0;
        Format_Id = 0;
        Output_Expression = "universe.day";
    }
    OUTPUT {
        Output_Element_Name = "warpday";
        Figures = 0;
        Format_Id = 0;
        Output_Expression = "universe.warpday";
    }
    OUTPUT {
        Output_Element_Name = "strength5";
        Figures = 8;
        Format_Id = 0;
        Output_Expression = "universe.Map.bridgecore(5).strength";
    }
    OUTPUT {
        Output_Element_Name = "situation";
        Figures = 0;
        Format_Id = 0;
        Output_Expression = "universe.situation";
    }
    OUTPUT {
        Output_Element_Name = "checkmode";
        Figures = 0;
        Format_Id = 0;
        Output_Expression = "universe.checkmode";
    }
    OUTPUT {
        Output_Element_Name = "collapse5";
        Figures = 0;
        Format_Id = 0;
        Output_Expression = "universe.Map.bridgecore(5).collapse";
    }
    OUTPUT {
        Output_Element_Name = "governmentcollapsebridge";
        Figures = 0;
        Format_Id = 0;
        Output_Expression = "universe.Map.government.collapsebridge";
    }
    OUTPUT {
        Output_Element_Name = "collapse0";
        Figures = 0;
        Format_Id = 0;
        Output_Expression = "universe.Map.bridgecore(0).collapse";
    }
    OUTPUT {
        Output_Element_Name = "collapse1";
        Figures = 0;
        Format_Id = 0;
        Output_Expression = "universe.Map.bridgecore(1).collapse";
    }
    OUTPUT {
        Output_Element_Name = "collapse2";
        Figures = 0;
        Format_Id = 0;
        Output_Expression = "universe.Map.bridgecore(2).collapse";
    }
    OUTPUT {
        Output_Element_Name = "collapse3";
        Figures = 0;
        Format_Id = 0;
        Output_Expression = "universe.Map.bridgecore(3).collapse";
    }
    OUTPUT {
        Output_Element_Name = "collapse4";
        Figures = 0;
        Format_Id = 0;
        Output_Expression = "universe.Map.bridgecore(4).collapse";
    }
    OUTPUT {
        Output_Element_Name = "collapse6";
        Figures = 0;
        Format_Id = 0;
        Output_Expression = "universe.Map.bridgecore(6).collapse";
    }
    OUTPUT {
        Output_Element_Name = "collapse7";
        Figures = 0;
        Format_Id = 0;
        Output_Expression = "universe.Map.bridgecore(7).collapse";
    }
    OUTPUT {
        Output_Element_Name = "collapse8";
        Figures = 0;
        Format_Id = 0;
        Output_Expression = "universe.Map.bridgecore(8).collapse";
    }
    OUTPUT {
        Output_Element_Name = "collapse9";
        Figures = 0;
        Format_Id = 0;
        Output_Expression = "universe.Map.bridgecore(9).collapse";
    }
    OUTPUT {
        Output_Element_Name = "collapse10";
        Figures = 0;
        Format_Id = 0;
        Output_Expression = "universe.Map.bridgecore(10).collapse";
    }
    OUTPUT {
        Output_Element_Name = "recalculate";
        Figures = 0;
        Format_Id = 0;
        Output_Expression = "universe.recalculate";
    }
    OUTPUT {
        Output_Element_Name = "strength0";
        Figures = 5;
        Format_Id = 0;
        Output_Expression = "universe.Map.bridgecore(0).strength";
    }
    OUTPUT {
        Output_Element_Name = "strength1";
        Figures = 5;
        Format_Id = 0;
        Output_Expression = "universe.Map.bridgecore(1).strength";
    }
    OUTPUT {
        Output_Element_Name = "strength2";
        Figures = 5;
        Format_Id = 0;
        Output_Expression = "universe.Map.bridgecore(2).strength";
    }
    OUTPUT {
        Output_Element_Name = "strength3";
        Figures = 5;
        Format_Id = 0;
        Output_Expression = "universe.Map.bridgecore(3).strength";
    }
    OUTPUT {
        Output_Element_Name = "strength4";
        Figures = 5;
        Format_Id = 0;
        Output_Expression = "universe.Map.bridgecore(4).strength";
    }
    OUTPUT {
        Output_Element_Name = "strength6";
        Figures = 5;
        Format_Id = 0;
        Output_Expression = "universe.Map.bridgecore(6).strength";
    }
    OUTPUT {
        Output_Element_Name = "strength7";
        Figures = 5;
        Format_Id = 0;
        Output_Expression = "universe.Map.bridgecore(7).strength";
    }
    OUTPUT {
        Output_Element_Name = "strength8";
        Figures = 5;
        Format_Id = 0;
        Output_Expression = "universe.Map.bridgecore(8).strength";
    }
    OUTPUT {
        Output_Element_Name = "strength9";
        Figures = 5;
        Format_Id = 0;
        Output_Expression = "universe.Map.bridgecore(9).strength";
    }
    OUTPUT {
        Output_Element_Name = "strength10";
        Figures = 5;
        Format_Id = 0;
        Output_Expression = "universe.Map.bridgecore(10).strength";
    }
}


//-------------------------------------------------------
// Time Graph Output Definition Division
//-------------------------------------------------------
Time_Graph {
    Font_Name = "Dialog";
    Font_Char_Set = 81;
    Font_Size = 12.0;
    Font_Style = 0;
    Font_Color = 0, 0, 0;
    Font_Background_Color = 255, 255, 255;
    Draw_Timing = Simulation_Step;
    Draw_Interval = 1;
    Graph_Name = "warpday";
    Title = "warpday";
    Disable = Yes;
    Background_Color = 255, 255, 255;
    Remarks = Yes;
    Legend_Pos = Top;
    FastDraw = No;
    Position_x = 120;
    Position_y = 120;
    Size_x = 500;
    Size_y = 300;
    Map_Cell_Size = -1;
    Axis_Label = "", "";
    Draw_By_JFree_Chart = Yes;
    Scale = 0, 0.0, 1000, 100.0, 100, 10.0;
    ScaleAuto = Yes, Yes;
    Output_Group_Name = "";
    Output {
        Graph_Element_Name = "warpday";
        Line_Color = 255, 0, 0;
        Line_Width = 2;
        Marker_Id = 0;
        Output_Expression = "universe.warpday";
        Expression_Value_Display = No;
        Effective_Fraction_Figures = 0;
        Graph_Element_Color = (0, 255, 0);
    }
}


//-------------------------------------------------------
// Control Panel Definition Division
//-------------------------------------------------------
Control_Panel {
    Display_Area = 1655, 322, 265, 394;
    Panel_Item {
        Item_Type = Edit_Box;
        Item_Name = "simulationcode";
        Display_Area = 0, 0, 0, 0;
        Font_Name = "";
        Font_Char_Set = 0;
        Font_Size = 0.0;
        Font_Style = 0;
        Font_Color = 0, 0, 0;
        Font_Background_Color = 0, 0, 0;
        Var_Name = "Universe.simulationcode";
        Text_Data = "2015/12/01littletestwarp4";
    }
    Panel_Item {
        Item_Type = Slider;
        Item_Name = "budget";
        Display_Area = 0, 0, 0, 0;
        Font_Name = "";
        Font_Char_Set = 0;
        Font_Size = 0.0;
        Font_Style = 0;
        Font_Color = 0, 0, 0;
        Font_Background_Color = 0, 0, 0;
        Var_Name = "Universe.univbudget";
        Slider_Range_Max = 99;
        Slider_Value_Min = 10.0;
        Slider_Value_Step = 10.0;
        Slider_Value = "4";
    }
    Panel_Item {
        Item_Type = Slider;
        Item_Name = "threshold";
        Display_Area = 0, 0, 0, 0;
        Font_Name = "";
        Font_Char_Set = 0;
        Font_Size = 0.0;
        Font_Style = 0;
        Font_Color = 0, 0, 0;
        Font_Background_Color = 0, 0, 0;
        Var_Name = "Universe.threshold";
        Slider_Range_Max = 8;
        Slider_Value_Min = 0.1;
        Slider_Value_Step = 0.1;
        Slider_Value = "7";
    }
    Panel_Item {
        Item_Type = Edit_Box;
        Item_Name = "testnumber";
        Display_Area = 0, 0, 0, 0;
        Font_Name = "";
        Font_Char_Set = 0;
        Font_Size = 0.0;
        Font_Style = 0;
        Font_Color = 0, 0, 0;
        Font_Background_Color = 0, 0, 0;
        Var_Name = "Universe.testnumber";
        Text_Data = "0";
    }
    Panel_Item {
        Item_Type = Edit_Box;
        Item_Name = "strengthlimit";
        Display_Area = 0, 0, 0, 0;
        Font_Name = "";
        Font_Char_Set = 0;
        Font_Size = 0.0;
        Font_Style = 0;
        Font_Color = 0, 0, 0;
        Font_Background_Color = 0, 0, 0;
        Var_Name = "Universe.strengthlimit";
        Text_Data = "0.01";
    }
}


//-------------------------------------------------------
// Space Initial Value Definition Divsion
//-------------------------------------------------------
Space_Initial {
}


//-------------------------------------------------------
// Other Miscellaneous Data Definition Division
//-------------------------------------------------------
Others_Data {
    Indent = 4;
    Rule_Colored = Yes;
    Window_Hide_Run = 1;
    Debug_Position_x = 263;
    Debug_Position_y = 7;
    Debug_Size_x = 400;
    Debug_Size_y = 200;
    Console_Position_x = 249;
    Console_Position_y = 2;
    Console_Size_x = 358;
    Console_Size_y = 761;
    Componen_Tree_Position_x = 3;
    Componen_Tree_Position_y = 5;
    Componen_Tree_Size_x = 250;
    Componen_Tree_Size_y = 408;
    Console_Background_Color = 10066329;
    Console_Foreground_Color = 255;
    Console_DisplayLines_Max = 500;
    Font_Name = "Dialog";
    Font_Char_Set = 0;
    Font_Size = 18.0;
    Font_Style = 0;
    Font_Color = 0, 0, 0;
    Font_Background_Color = 0, 0, 0;
}


//-------------------------------------------------------
// Network Information Definition Division
//-------------------------------------------------------
Network_Info {
    Global_Space_Area = 0, 0, 100, 100;
    Local_Space_Info {
    }
}


//-------------------------------------------------------
// Space Map Initial Value Definition Division
//-------------------------------------------------------
Space_Map_Initial_Value {
    Space_Path_Name = Universe.Map;
    Background_Image_File_Path_Name = "..\Downloads\ph3.jpg";
    Origin_Position = Left_Bottom;
    Position_Agent {
        Agent_Name = Universe.Map.Point;
        Marker_Color = 255, 0, 0;
        Marker_Id = 1;
        Value = (44.99105546,43.112701252,0),(42.48658318,43.202146691,0),(43.20214669,40.429338103999996,0),(46.86940966,37.92486583,0),(45.16994633,34.3470483,0)
               ,(40.96601073,33.184257599999995,0),(43.82826476,28.35420394,0),(45.52772809,25.67084079,0),(48.21109123,28.44364937,0),(47.49552773,20.12522361,0)
               ,(42.03935599,18.87298748,0),(46.69051878,15.921288009999998,0),(41.77101968,14.758497319999996,0),(43.47048301,11.359570660000003,0),(46.60107335,10.644007160000001,0)
               ,(44.72271914,5.992844359999999,0),(41.94991055,7.7817531299999985,0),(47.13774597,3.39892665,0),(49.28443649,5.903398930000002,0),(48.8372093,0.8050089400000005,0)
               ,(43.38103757,46.243291592,0),(37.20930233,42.397137746,0),(36.76207513,37.835420389999996,0),(38.46153846,34.88372093,0),(41.5921288,37.11985689,0)
               ,(37.47763864,31.48479428,0),(33.72093023,37.11985689,0),(35.33094812,28.35420394,0),(38.5509839,25.58139535,0),(39.80322004,20.84078712,0)
               ,(36.85152057,15.563506259999997,0),(37.29874776,12.880143109999999,0),(38.81932021,10.017889089999997,0),(37.65652952,5.187835419999999,0),(38.5509839,2.0572450800000013,0)
               ,(40.96601073,2.5939177099999995,0),(34.97316637,42.039355993,0),(34.16815742,45.438282648,0),(37.83542039,47.227191413,0),(40.33989267,47.763864043,0)
               ,(47.76386404,45.796064401,0),(29.42754919,48.211091234,0),(29.33810376,45.706618962,0),(29.42754919,41.14490161,0),(29.42754919,39.35599284,0)
               ,(29.24865832,35.68872987,0),(29.15921288,33.094812160000004,0),(29.15921288,28.80143113,0),(29.60644007,25.76028623,0),(29.78533095,23.70304114,0)
               ,(29.69588551,19.67799642,0),(30.50089445,17.710196779999997,0),(31.12701252,12.254025040000002,0),(30.23255814,8.94454383,0),(31.03756708,6.171735239999997,0)
               ,(30.41144902,1.6100178900000017,0),(3.13059034,47.137745975,0),(1.967799642,42.397137746,0),(6.797853309,35.509839,0),(0.894454383,30.85867621,0)
               ,(4.830053667,24.23971377,0),(8.228980322,25.2236136,0),(4.293381038,18.78354204,0),(2.59391771,21.10912343,0),(2.862254025,15.474060819999998,0)
               ,(10.46511628,14.57960644,0),(8.050089445,12.611806799999997,0),(2.772808587,11.896243290000001,0),(2.236135957,9.302325580000002,0),(1.699463327,5.6350626099999985,0)
               ,(4.472271914,2.9516994600000004,0),(6.797853309,2.14669052,0),(5.277280859,5.992844359999999,0),(5.098389982,8.676207509999998,0),(8.31842576,9.03398927,0)
               ,(9.838998211,6.529516989999998,0),(13.59570662,3.2200357800000035,0),(12.79069767,7.423971379999998,0),(14.490161,11.53846154,0),(13.59570662,16.368515209999998,0)
               ,(11.18067979,17.262969589999997,0),(5.813953488,17.08407871,0),(9.481216458,21.10912343,0),(13.41681574,20.39355993,0),(13.41681574,27.19141324,0)
               ,(10.82289803,27.63864043,0),(9.033989267,31.93202147,0),(12.6118068,31.93202147,0),(17.26296959,28.35420394,0),(10.82289803,37.11985689,0)
               ,(8.765652952,39.7137746,0),(13.59570662,39.98211091,0),(8.676207513,43.381037567,0),(5.545617174,45.974955277,0),(9.39177102,46.779964222,0)
               ,(6.887298748,48.568872987,0),(16.36851521,1.6994633300000004,0),(17.88908766,4.203935600000001,0),(18.60465116,9.212880140000003,0),(18.51520572,13.506261180000003,0)
               ,(17.88908766,18.78354204,0),(19.23076923,23.07692308,0),(20.30411449,28.08586762,0),(17.79964222,31.39534884,0),(15.02683363,34.70483005,0)
               ,(15.38461538,37.29874776,0),(15.56350626,41.502683363,0),(14.04293381,44.543828265,0),(15.11627907,46.601073345,0),(16.27906977,47.942754919,0)
               ,(1.810054877,2.0755886000000032,0),(1.633032395,25.97362365,0),(1.19047619,35.26730395,0),(1.633032395,39.781377230000004,0);
    }
    Position_Agent {
        Agent_Name = Universe.Map.government;
        Marker_Color = 255, 0, 0;
        Marker_Id = 1;
        Value = (24.41860465,23.61359571,0);
    }
    Position_Agent {
        Agent_Name = Universe.Map.bridgecore;
        Marker_Color = 153, 0, 153;
        Marker_Id = 5;
        Value = (22.25615153,48.101433882,0),(22.07912905,45.269074172,0),(22.07912905,39.07328731,0),(22.87573022,35.35581519,0),(24.29191007,28.4519384,0)
               ,(23.14126394,24.02637635,0),(24.02637635,19.1582581,0),(24.38042131,13.050982470000001,0),(24.29191007,9.15648787,0),(24.20339883,4.996459549999997,0)
               ,(23.93786511,1.7215436400000002,0);
    }
    Link_Agent {
        Agent_Name = Universe.Link;
        Line_Color = 0, 255, 0;
        Line_Type = 1;
        Arrow_Type = 1;
        Link_Id = "Universe.Map.Point/Universe.Map.Point";
        Link = (0,40,0),(0,0,3),(0,3,4),(0,4,8),(0,8,7)
              ,(0,7,9),(0,9,11),(0,11,14),(0,14,18),(0,18,19)
              ,(0,56,57),(0,57,113),(0,113,112),(0,112,59),(0,59,111)
              ,(0,111,63),(0,63,64),(0,64,67),(0,67,68),(0,68,69)
              ,(0,69,110),(0,109,41),(0,42,107),(0,43,105),(0,104,45)
              ,(0,102,47),(0,48,101),(0,100,50),(0,52,99),(0,98,53)
              ,(0,54,97),(0,96,55),(0,40,20),(0,20,39),(0,39,38)
              ,(0,38,37),(0,37,41),(0,41,42),(0,42,43),(0,43,44)
              ,(0,44,45),(0,45,46),(0,46,47),(0,47,48),(0,48,49)
              ,(0,49,50),(0,50,51),(0,51,52),(0,52,53),(0,53,54)
              ,(0,54,55),(0,109,108),(0,108,107),(0,107,106),(0,106,91)
              ,(0,91,105),(0,105,104),(0,104,103),(0,103,88),(0,88,102)
              ,(0,102,101),(0,101,100),(0,100,99),(0,99,98),(0,98,97)
              ,(0,97,96),(0,96,76),(0,76,71),(0,71,70),(0,70,110)
              ,(0,56,95),(0,95,94),(0,94,109),(0,55,34),(0,34,35)
              ,(0,35,19),(0,1,20),(0,1,21),(0,2,1),(0,2,0)
              ,(0,2,22),(0,22,21),(0,21,36),(0,36,37),(0,37,42)
              ,(0,43,26),(0,26,22),(0,36,26),(0,44,26),(0,45,23)
              ,(0,23,22),(0,22,24),(0,24,2),(0,2,3),(0,3,24)
              ,(0,24,4),(0,4,5),(0,5,6),(0,6,8),(0,6,7)
              ,(0,6,28),(0,28,7),(0,7,29),(0,29,28),(0,28,27)
              ,(0,27,25),(0,25,23),(0,23,46),(0,46,25),(0,25,47)
              ,(0,47,27),(0,27,48),(0,48,28),(0,28,5),(0,5,27)
              ,(0,5,23),(0,23,24),(0,49,28),(0,49,29),(0,50,10)
              ,(0,10,29),(0,29,50),(0,51,30),(0,30,10),(0,10,9)
              ,(0,30,12),(0,12,11),(0,12,10),(0,12,13),(0,13,16)
              ,(0,16,15),(0,15,17),(0,17,19),(0,17,18),(0,18,15)
              ,(0,15,14),(0,14,13),(0,16,33),(0,33,54),(0,53,32)
              ,(0,32,13),(0,52,31),(0,31,12),(0,30,52),(0,29,9)
              ,(0,43,36),(0,38,21),(0,21,39),(0,33,34),(0,35,16)
              ,(0,33,32),(0,32,31),(0,31,30),(0,45,26),(0,107,92)
              ,(0,92,94),(0,94,93),(0,93,56),(0,93,57),(0,57,92)
              ,(0,92,90),(0,90,113),(0,113,58),(0,58,112),(0,112,86)
              ,(0,86,59),(0,59,60),(0,60,111),(0,60,61),(0,61,85)
              ,(0,85,84),(0,84,88),(0,87,86),(0,58,86),(0,86,89)
              ,(0,89,90),(0,90,58),(0,90,91),(0,91,92),(0,92,106)
              ,(0,89,105),(0,87,104),(0,87,103),(0,111,62),(0,61,86)
              ,(0,86,85),(0,85,87),(0,87,84),(0,84,103),(0,84,83)
              ,(0,83,79),(0,79,78),(0,78,77),(0,77,76),(0,76,71)
              ,(0,71,75),(0,75,72),(0,72,70),(0,70,69),(0,69,73)
              ,(0,73,74),(0,74,78),(0,78,66),(0,66,65),(0,65,80)
              ,(0,80,79),(0,83,82),(0,82,81),(0,81,62),(0,64,81)
              ,(0,64,66),(0,81,65),(0,65,82),(0,82,61),(0,60,86)
              ,(0,66,67),(0,67,74),(0,68,73),(0,69,72),(0,75,77)
              ,(0,77,74),(0,74,75),(0,75,76),(0,76,97),(0,97,77)
              ,(0,77,98),(0,98,78),(0,78,99),(0,99,79),(0,79,100)
              ,(0,100,83),(0,83,101),(0,101,84),(0,88,101),(0,103,102)
              ,(0,105,106),(0,106,108),(0,108,94),(0,58,89),(0,40,3)
              ,(0,3,8),(0,8,9),(0,9,18),(0,18,17),(0,17,35)
              ,(0,35,15),(0,33,55),(0,96,71),(0,71,110),(0,60,62);
    }
}


//-------------------------------------------------------
// Window Location Definition Division
//-------------------------------------------------------
Window_Rectangle {
    Window_Name = Main_Window, 0, 0, 1769, 956;
    Window_Name = Output_Setting_Window, 644, 333, 480, 290;
}


//-------------------------------------------------------
// Help Favorite Division
//-------------------------------------------------------
Help_Favorite {
}
