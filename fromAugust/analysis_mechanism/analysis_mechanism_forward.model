//====================================================================/
//　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　/
// artisoc                                                            /
//                                                                    /
//====================================================================/

Version = 3.5;



//-------------------------------------------------------
// Component Tree
//-------------------------------------------------------
UNIVERSE {
    Space map(0,0),Square_2D(50, 50, Loop, North, 1, !Map_3D){
        AgtType point(0, 0)[9] {
            Dim ID(0, 0) As Integer = (0);
            Dim X(0, 0) As Double = (0.0);
            Dim Y(0, 0) As Double = (0.0);
            Dim Layer(0, 0) As Integer = (0);
            Dim Direction(0, 0) As Double = (0.0);
            Dim nearagtset(0, 0) As AgtSet = ();
            Dim choiceagt(0, 0) As Agt = (0);
            Dim streetagt(0, 0) As Agt = (0);
            Dim reward(0, 0) As Integer = (0);
            Dim color(0, 0) As Integer = (0);
            Dim mycounter(0, 0) As Integer = (0);
        }
        AgtType kyoka(0, 0)[0] {
            Dim ID(0, 0) As Integer = (0);
            Dim X(0, 0) As Double = (0.0);
            Dim Y(0, 0) As Double = (0.0);
            Dim Layer(0, 0) As Integer = (0);
            Dim Direction(0, 0) As Double = (0.0);
            Dim routearray(0, 0) As String = ("");
            Dim routecount(0, 0) As Integer = (0);
            Dim goal(0, 0) As Integer = (0);
            Dim qtable(0, 0)[100][4] As Double = (400*0.0);
            Dim learning_rate(0, 0) As Double = (0.0);
            Dim discount_rate(0, 0) As Double = (0.0);
            Dim ipusiron(0, 0) As Double = (0.0);
            Dim q_k(0, 0) As Integer = (0);
            Dim start(0, 0) As Integer = (0);
            Dim speed(0, 0) As Double = (0.0);
            Dim dist(0, 0) As Double = (0.0);
            Dim utility(0, 0) As Integer = (0);
            Dim afterutility(0, 0) As Integer = (0);
        }
        Dim qq(0, 0)[50][50][1] As Double = (2500*0.0);
        AgtType counter(0, 0)[0] {
            Dim ID(0, 0) As Integer = (0);
            Dim X(0, 0) As Double = (0.0);
            Dim Y(0, 0) As Double = (0.0);
            Dim Layer(0, 0) As Integer = (0);
            Dim Direction(0, 0) As Double = (0.0);
            Dim startid(0, 0) As Integer = (0);
            Dim endid(0, 0) As Integer = (0);
            Dim value(0, 0) As Integer = (0);
            Dim cost(0, 0) As Integer = (0);
            Dim hiddenid(0, 0) As Integer = (0);
        }
    }
    AgtType link(0, 0)[12] {
        Dim ID(0, 0) As Integer = (0);
        Dim Begin_Agt(0, 0) As Agt = (0);
        Dim End_Agt(0, 0) As Agt = (0);
        Dim streetagt(0, 0) As Agt = (0);
        Dim reverselinkagt(0, 0) As Agt = (0);
        Dim counter(0, 0) As Integer = (0);
    }
    AgtType street(0, 0)[0] {
        Dim ID(0, 0) As Integer = (0);
        Dim points(0, 0) As String = ("");
        Dim cost(0, 0) As Double = (0.0);
        Dim reversestreetagt(0, 0) As Agt = (0);
    }
    AgtType streetbackup(0, 0)[0] {
        Dim ID(0, 0) As Integer = (0);
        Dim streetagt(0, 0) As Agt = (0);
        Dim points(0, 0) As String = ("");
        Dim cost(0, 0) As Double = (0.0);
        Dim reversestreetagt(0, 0) As Agt = (0);
    }
    Dim qtable_dist(0, 0)[100][4] As Integer = (400*0);
    Dim qtable_count(0, 0)[100] As Integer = (100*0);
    Dim endsimulation(0, 0) As Integer = (0);
    Dim start_points(0, 0)[100] As Integer = (100*0);
    Dim cost_dist(0, 0)[100][4] As Integer = (400*0);
    Dim linkid_dist(0, 0)[100][4] As Integer = (400*0);
    Dim hiddenidtable(0, 0)[12][4] As Integer = (48*0);
}


//-------------------------------------------------------
// Agent Variable Initial Data
//-------------------------------------------------------
Initial_Value {
    UNIVERSE.QTABLE_DIST = 1(400*0);
    UNIVERSE.HIDDENIDTABLE = 1(0, 1, 0, 10, 1, 2, 1, 8, 0, 3
, 2, 5, 1, 5, 3, 7, 2, 6, 4, 12
, 3, 2*5, 7, 5, 2*6, 9, 3, 4, 7, 10
, 5, 7, 8, 13, 6, 8, 9, 15, 4, 7
, 10, 4, 7, 8, 11, 0);
    UNIVERSE.MAP.QQ = 1(2500*0.0);
    UNIVERSE.MAP.POINT.X = 21(10.641263940520446, 21.79368029739777, 34.0843631735825, 2*10.389664757694497, 22.11142369134934, 34.16809002310861, 22.19515054087545, 34.0006363240564, 40.10223048327138, 40.65985130111524
, 40.19516728624535, 29.693308550185876, 27.83457249070632, 15.381040892193308, 15.288104089219331, 5.901486988847584, 15.75278810408922, 26.533457249070633, 40.10223048327138, 21.70074349442379);
    UNIVERSE.MAP.POINT.Y = 21(35.78066914498142, 35.87360594795539, 35.96821728791989, 26.92571753910044, 17.966944639807096, 26.758263840048226, 26.67453699052212, 17.715764091228777, 17.79949094075488, 12.639405204460964
, 21.28252788104089, 30.018587360594797, 31.598513011152416, 21.003717472118957, 21.933085501858734, 28.438661710037174, 6.040892193308551, 6.412639405204459, 6.505576208178439, 6.691449814126393
, 3.903345724907062);
    UNIVERSE.MAP.POINT.LAYER = 21(21*0);
    UNIVERSE.MAP.POINT.DIRECTION = 20(20*0.0);
    UNIVERSE.MAP.POINT.REWARD = 20(20*0);
    UNIVERSE.MAP.POINT.COLOR = 9(9*0);
    UNIVERSE.MAP.KYOKA.X = 16(42.239776951672866, 29.04275092936803, 17.053903345724905, 5.1579925650557605, 5.529739776951672, 5.0650557620817835, 5.436802973977695, 16.682156133828997, 30.622676579925653, 42.611524163568774
, 42.239776951672866, 42.51858736059479, 30.436802973977695, 31.180297397769518, 18.819702602230482, 17.797397769516728);
    UNIVERSE.MAP.KYOKA.Y = 16(42.37918215613383, 43.12267657992565, 43.30855018587361, 42.750929368029745, 35.78066914498142, 26.20817843866171, 18.49442379182156, 2*17.93680297397769, 16.91449814126394, 25.0
, 35.22304832713755, 35.594795539033456, 26.765799256505577, 26.6728624535316, 35.687732342007436);
    UNIVERSE.MAP.KYOKA.LAYER = 16(16*0);
}


//-------------------------------------------------------
// Agent Rule
//-------------------------------------------------------
#begin_rule UNIVERSE
include "init.inc"

Univ_Init{
dim i as integer
dim k as integer
dim one as agt
dim link as agt
dim data_i as integer

initialize_dijkstra()
universe.endsimulation = 0

for i = 0 to countagt(universe.map.point)-1
	universe.qtable_count(i) = 0
	for each one in universe.map.point(i).nearagtset
		universe.qtable_count(i) = universe.qtable_count(i) + 1
	next one
next i

for i = 0 to countagt(universe.map.point)-1
k = 0
	for each one in universe.map.point(i).nearagtset
		universe.qtable_dist(i,k) = one.id
		link = get_link_from_points(i,one.id)
		universe.linkid_dist(i,k) = link.id
		k = k + 1
	next one
next i
}

Univ_Step_Begin{
dim k as integer
}

Univ_Step_End{
dim i as integer
dim k as integer

if universe.endsimulation == countagt(universe.map.kyoka) then
	// edgevalue,utilityを書き出す
	openfilecsv("result_not_random.csv",1,3)
	writefilecsv(1,getcountsimulationnumber(),false)
	for i = 0 to 11
		for k = 0 to 11
			if universe.map.counter(i).hiddenid == k then
				writefilecsv(1,"Edge"&k,false)
				writefilecsv(1,universe.map.counter(i).value,false)
			end if
		next k
	next i
	writefilecsv(1,universe.map.kyoka(0).afterutility,false)
	writefilecsv(1,universe.map.kyoka(1).afterutility,false)
	writefilecsv(1,universe.map.kyoka(2).afterutility,true)
	closefilecsv(1)
	exitsimulation()
end if
}

Univ_Finish{

}
#end_rule UNIVERSE




//-------------------------------------------------------
// Agent Rule
//-------------------------------------------------------
#begin_rule UNIVERSE.MAP.POINT

Agt_Init{
dim personagt as agt
dim point as agt
dim i as integer
dim k as integer
dim one as agt
dim m as integer

k  = 0

i = 0
	if my.ID == i then
		for m = 0 to 2
			personagt = createagt(universe.map.kyoka)
			universe.start_points(personagt.id) = i
			personagt.x = my.X
			personagt.y = my.Y
		next m
	end if
	
// for q-learning
// 報酬の決定
if my.ID == 8 then
	my.reward = 100
else
	my.reward = -1
end if

my.color = COLOR_CYAN

}

Agt_Step{

}
#end_rule UNIVERSE.MAP.POINT




//-------------------------------------------------------
// Agent Rule
//-------------------------------------------------------
#begin_rule UNIVERSE.MAP.KYOKA
Agt_Init{
dim i as integer
dim k as integer
dim maxq as integer
dim maxdist as integer
dim data_i as string
dim data_k as string
dim data_q as string

my.routecount = -1
my.goal = 8

// Mechanism
if my.ID == 0 then
	my.utility = 1000
	my.afterutility = my.utility
elseif my.ID == 1 then
	my.utility = 800
	my.afterutility = my.utility
elseif my.ID == 2 then
	my.utility = 1200
	my.afterutility = my.utility
end if

// Q-learning
my.ipusiron = 0.3
my.learning_rate = 0.1
my.discount_rate = 0.9

/* Q学習しないのでコメントアウト
if getcountsimulationnumber() == 1 then
	for i = 0 to countagt(universe.map.point)-1
		for k = 0 to universe.qtable_count(i)-1
			my.qtable(i,k) = 50 * rnd()
			
		next k
	next i

	// 書き出し
openfilecsv("qtable_"&my.ID&".csv",1,2)
	for i = 0 to countagt(universe.map.point)-1
		for k = 0 to universe.qtable_count(i) - 1
			writefilecsv(1,i,false)
			writefilecsv(1,k,false)
			writefilecsv(1,my.qtable(i,k),true)
		next k
	next i
closefilecsv(1)
else
	//前回のQ表を読み込む
openfilecsv("qtable_"&my.ID&".csv",1,1)
	for i = 0 to countagt(universe.map.point)-1
		for k = 0 to universe.qtable_count(i) - 1
			data_i = cint(readfilecsv(1))
			data_k = cint(readfilecsv(1))
			my.qtable(data_i,data_k) = cdbl(readfilecsv(1))
			readfilecsv(1)
		next k
	next i
closefilecsv(1)
end if
*/
}

Agt_Step{
dim targetpointid as integer
dim targetpointagt as agt
dim distance as double
dim i as integer
dim k as integer
dim m as integer
dim maxq as integer
dim maxdist as integer
dim nextmax as integer
dim CNo as integer
dim set as agtset
dim one as agt

// first root
/* Q学習の場合
if getcountstep() == 1 then
my.start = universe.start_points(my.ID)
i = my.start
maxdist = universe.qtable_dist(i,0)
	for k = 0 to universe.qtable_count(i) - 1
		if k == 0 then
			maxq = my.qtable(i,k)
			maxdist = universe.qtable_dist(i,k)
		else
			if maxq < my.qtable(i,k) then
				maxq = my.qtable(i,k)
				maxdist = universe.qtable_dist(i,k)
			end if
		end if
	next k
my.routearray = cstr(my.start) & "," & cstr(maxdist)
my.routecount = 1
end if
*/

dim linkagt as agt
dim numcounter as integer
numcounter = countagt(universe.map.counter)

// Q学習でない場合
if getcountstep() == 1 then
	my.start = universe.start_points(my.ID)
	i = my.start
	// ランダムに最初を決定
	//m = int(universe.qtable_count(i) * rnd())
	m = int(2*rnd())
	maxdist = universe.qtable_dist(i,m)
	my.routearray = cstr(my.start) & "," & cstr(maxdist)
	my.routecount = 1
	// 価値を足す
	for i = 0 to numcounter - 1
		if universe.map.counter(i).startid == my.start then
			if universe.map.counter(i).endid == maxdist then
				universe.map.counter(i).value = universe.map.counter(i).value + my.utility
				my.afterutility = my.afterutility - universe.map.counter(i).cost
			end if
		end if
	next i
end if

// speed
// 進む速度の定義
makeoneagtsetaroundown(set,3,universe.map.kyoka,false)
CNo = countagtset(set)
if CNo >= 1 then
	for each one in set
		if abs(one.direction - my.Direction) <> 180 then
			one.dist = measuredistance(my.X,my.y,one.x,one.y,universe.map)
		end if
	next one
	
	// 一番近い距離の
	sortagtset(set,"dist",true)
	one = getagt(set,0)
	
	// 車間距離に応じたスピードの定義
	if abs(one.direction - my.Direction) == 180 then // 反対車線にいる場合は速度(2)で
		my.speed = 2
	else
		my.speed = 2*(tanh((one.dist-0.01)/1)+tanh(0.01/1)) //距離３で速度２に落ち着くように調整した
	end if
elseif CNo == 0 then //誰もいないなら速度(2)で
	my.speed = 2
end if

if my.routecount > 0 then
	targetpointid = cint(gettoken(my.routearray, my.routecount))
	targetpointagt = universe.map.point(targetpointid)
	distance = pursue(targetpointagt, 1)
	
	// 目的地に到着後
	if distance > 0 then
	
		// 次のルートを決める
		
		/* Q学習の場合
		// ε以下だったらランダムで、以上だったらQ値が一番高いところを選ぶ
		i = targetpointid
		if rnd() > my.ipusiron then
			for k = 0 to universe.qtable_count(i) - 1
				if k == 0 then
					maxq = my.qtable(i,k)
					maxdist = universe.qtable_dist(i,k)
					my.q_k = k
				else
					if maxq < my.qtable(i,k) then
						maxq = my.qtable(i,k)
						maxdist = universe.qtable_dist(i,k)
						my.q_k = k
					end if
				end if
			next k
		else
			k = int(rnd() * universe.qtable_count(i))
			my.q_k = k
			maxdist = universe.qtable_dist(i,k)
		end if
		//次のポイントの最大のQ値になるkを求める
		for k = 0 to universe.qtable_count(maxdist) - 1
				if k == 0 then
					maxq = my.qtable(maxdist,k)
					nextmax= k
				else
					if maxq < my.qtable(maxdist,k) then
						maxq = my.qtable(maxdist,k)
						nextmax = k
					end if
				end if
		next k
		//Q値を更新する	
		my.qtable(i,my.q_k) = (1-my.learning_rate)*my.qtable(i,my.q_k) + my.learning_rate*(universe.map.point(maxdist).reward + my.discount_rate*(my.qtable(maxdist,nextmax)-my.qtable(i,my.q_k)))
		openfilecsv("qtable_"&my.ID&".csv",1,2)
		for i = 0 to countagt(universe.map.point)-1
			for k = 0 to universe.qtable_count(i) - 1
				writefilecsv(1,i,false)
				writefilecsv(1,k,false)
				writefilecsv(1,my.qtable(i,k),true)
			next k
		next i
		closefilecsv(1)
		my.routearray = my.routearray & "," & cstr(maxdist)
		my.routecount = my.routecount + 1
		*/
		
		// Q学習でない場合
		i = targetpointid
		maxdist = 0
		do until i < maxdist or i == 8
			k = int(rnd() * universe.qtable_count(i))
			my.q_k = k
			maxdist = universe.qtable_dist(i,k)
		loop
		my.routearray = my.routearray & "," & cstr(maxdist)
		my.routecount = my.routecount + 1
		// 価値を足す
		if cint(gettoken(my.routearray, my.routecount)) == my.goal and maxdist <= 7 then
		else
		for i = 0 to numcounter - 1
			if universe.map.counter(i).startid == targetpointid then
				if universe.map.counter(i).endid == maxdist then
					universe.map.counter(i).value = universe.map.counter(i).value + my.utility
					my.afterutility = my.afterutility - universe.map.counter(i).cost
				end if
			end if
			// 逆も定義
			if universe.map.counter(i).startid == maxdist then
				if universe.map.counter(i).endid == targetpointid then
					universe.map.counter(i).value = universe.map.counter(i).value + my.utility
					my.afterutility = my.afterutility - universe.map.counter(i).cost
				end if
			end if
		next i
		end if
		
		if targetpointid == my.goal then
			my.routecount = -1
			universe.endsimulation = universe.endsimulation + 1
		else
			targetpointid = cint(gettoken(my.routearray, my.routecount))
			targetpointagt = universe.map.point(targetpointid)
			pursue(targetpointagt, distance) 
		end if
	end if
end if
}
#end_rule UNIVERSE.MAP.KYOKA




//-------------------------------------------------------
// Agent Rule
//-------------------------------------------------------
#begin_rule UNIVERSE.MAP.COUNTER
Agt_Init{
my.value = 0
}

Agt_Step{
dim i as integer

if getcountstep() == 1 then
	//hiddenidを決定するよ
	for i = 0 to 11
		if my.startid == universe.hiddenidtable(i,0) then
			if my.endid == universe.hiddenidtable(i,1) then
				my.hiddenid = universe.hiddenidtable(i,2)
				my.cost = universe.hiddenidtable(i,3)
			end if
		end if
		// 逆も定義
		if my.startid == universe.hiddenidtable(i,1) then
			if my.endid == universe.hiddenidtable(i,0) then
				my.hiddenid = universe.hiddenidtable(i,2)
				my.cost = universe.hiddenidtable(i,3)
			end if
		end if
	next i
end if
}
#end_rule UNIVERSE.MAP.COUNTER




//-------------------------------------------------------
// Agent Rule
//-------------------------------------------------------
#begin_rule UNIVERSE.LINK
Agt_Init{
dim test1 as agt
dim test2 as agt
dim counteragt as agt
test1 = my.Begin_Agt
test2 = my.End_Agt
my.counter = -1

// 中間地点にcounterを作る
if test1 > 0 then
	counteragt = createagt(universe.map.counter)
	counteragt.x = (test1.x + test2.x) / 2
	counteragt.y = (test1.y + test2.y) / 2
	test1.mycounter = counteragt.id
	test2.mycounter = counteragt.id
	if my.id <= 11 then // リンクの総数
		my.counter = counteragt.id
	end if
end if
// counterに始点と終点を作る
if test1>0 then
	universe.map.counter(my.counter).startid = test1.id
	universe.map.counter(my.counter).endid = test2.id
end if
}

Agt_Step{

}
#end_rule UNIVERSE.LINK




//-------------------------------------------------------
// Agent Rule
//-------------------------------------------------------
#begin_rule UNIVERSE.STREET
Agt_Init{

}

Agt_Step{

}
#end_rule UNIVERSE.STREET




//-------------------------------------------------------
// Agent Rule
//-------------------------------------------------------
#begin_rule UNIVERSE.STREETBACKUP
Agt_Init{

}

Agt_Step{

}
#end_rule UNIVERSE.STREETBACKUP




//-------------------------------------------------------
// Simulation Definition Division
//-------------------------------------------------------
Single_Simulation {
    Step_Max = 0;
    Time_Max = 0;
    End_Condition = "";
    Exec_Wait = 1;
    Exec_Order = Component;
    Exec_Order_Random_First_Step_Only = No;
    Random_Seed = 0;
    Redraw_Timing = Step;
    Redraw_Interval = 1;
    Garbage_Interval = 0;
}


//-------------------------------------------------------
// Simulation Loop Definition Division
//-------------------------------------------------------
Repeat_Simulation {
    Value_Change = None;
    Initial_Value_Change_None {
        Repeat_Max = 5000;
    }
}


//-------------------------------------------------------
// Executing Order By Agent Component Definition Division
//-------------------------------------------------------
Executing_Order_Component {
    Component_Priority = "Universe.link", 2;
    Component_Priority = "Universe.map.point", 3;
    Component_Priority = "Universe.street", 3;
    Component_Priority = "Universe.map.counter", 4;
    Component_Priority = "Universe.streetbackup", 4;
    Component_Priority = "Universe.map.kyoka", 5;
}


//-------------------------------------------------------
// 2 Dimension Map Display Definition Division
//-------------------------------------------------------
Map_Output {
    Map_Space_Name = "Universe.map";
    Map_Name = "map";
    Title = "map";
    Disable = No;
    Background_Color = 255, 255, 255;
    Position_x = 816;
    Position_y = -2;
    Size_x = 1099;
    Size_y = 932;
    Remarks = Yes;
    Map_Cell_Size = 4;
    Legend_Pos = Top;
    Font_Name = "Dialog";
    Font_Char_Set = 81;
    Font_Size = 12.0;
    Font_Style = 0;
    Font_Color = 0, 0, 0;
    Font_Background_Color = 255, 255, 255;
    FastDraw = Yes;
    Draw_Timing = Simulation_Step;
    Draw_Interval = 1;
    Axis_Label = "", "";
    Draw_Range = 0, 0, 50, 50;
    Ruled_Line = No;
    Text_Display = No;
    Text_Display_Variable_Name = "";
    Chess_Type_Display_Position = Yes;
    Background_Transparent = No;
    Target_Layer = 0;
    Coordinate_Display = No;
    Space_Kind = Square_2D;
    BG_Pict = No;
    BG_Type = 0;
    BG_Var_Name = "";
    BG_File_Name = "";
    Origin_Position = 2;
    Output_Group_Name = "";
    Output {
        Map_Element_Name = "counter";
        Map_Element = Agent_Variable;
        Output_Expression = "Universe.map.counter";
        Draw_Line = No;
        Collection_Name = "";
        Line_Type = 0;
        Line_Arrow = 0;
        Line_Width = 0;
        Line_Color = 0, 0, 0;
        Line_Type_Variable = "";
        Line_Arrow_Variable = "";
        Line_Width_Variable = "";
        Line_Color_Variable = "";
        Agent_Color = 0,255,0;
        Marker_Id = 2;
        Effective_Figures = 0;
        Format_Id = 0;
        Agent_Image_Direction = No;
        Icon_Type = 0;
        Icon_Var_Name = "";
        Icon_Transparent = No;
        Icon_Enlarg_Reduce = No;
        Icon_File_Name = "";
        Num_Display = Yes;
        Num_Var_Name = "Universe.map.counter.hiddenid";
        Agent_Image_Magnify_by_value = Yes;
        Agent_Image_Magnify_Value = 1.0;
        Agent_Image_Magnify_Variable_Name = "Universe.map.counter.ID";
        Agent_Image_Transparency_by_value = Yes;
        Agent_Image_Transparency_Value = 0.0;
        Agent_Image_Transparency_Variable_Name = "Universe.map.counter.ID";
    }
    Output {
        Map_Element_Name = "points";
        Map_Element = Agent_Variable;
        Output_Expression = "Universe.map.point";
        Draw_Line = Yes;
        Collection_Name = "Universe.map.point.nearagtset";
        Line_Type = 1;
        Line_Arrow = 3;
        Line_Width = 1;
        Line_Color = 0, 255, 255;
        Line_Type_Variable = "";
        Line_Arrow_Variable = "";
        Line_Width_Variable = "";
        Line_Color_Variable = "";
        Agent_Color = "Universe.map.point.color";
        Marker_Id = 1;
        Effective_Figures = 0;
        Format_Id = 0;
        Agent_Image_Direction = No;
        Icon_Type = 0;
        Icon_Var_Name = "";
        Icon_Transparent = No;
        Icon_Enlarg_Reduce = No;
        Icon_File_Name = "";
        Num_Display = Yes;
        Num_Var_Name = "Universe.map.point.ID";
        Agent_Image_Magnify_by_value = Yes;
        Agent_Image_Magnify_Value = 1.0;
        Agent_Image_Magnify_Variable_Name = "Universe.map.point.ID";
        Agent_Image_Transparency_by_value = Yes;
        Agent_Image_Transparency_Value = 0.0;
        Agent_Image_Transparency_Variable_Name = "Universe.map.point.ID";
    }
    Output {
        Map_Element_Name = "kyoka";
        Map_Element = Agent_Variable;
        Output_Expression = "Universe.map.kyoka";
        Draw_Line = No;
        Collection_Name = "";
        Line_Type = 0;
        Line_Arrow = 0;
        Line_Width = 0;
        Line_Color = 0, 0, 0;
        Line_Type_Variable = "";
        Line_Arrow_Variable = "";
        Line_Width_Variable = "";
        Line_Color_Variable = "";
        Agent_Color = 255,0,0;
        Marker_Id = 1;
        Effective_Figures = 0;
        Format_Id = 0;
        Agent_Image_Direction = No;
        Icon_Type = 0;
        Icon_Var_Name = "";
        Icon_Transparent = No;
        Icon_Enlarg_Reduce = No;
        Icon_File_Name = "";
        Num_Display = Yes;
        Num_Var_Name = "Universe.map.kyoka.ID";
        Agent_Image_Magnify_by_value = Yes;
        Agent_Image_Magnify_Value = 1.0;
        Agent_Image_Magnify_Variable_Name = "Universe.map.kyoka.ID";
        Agent_Image_Transparency_by_value = Yes;
        Agent_Image_Transparency_Value = 0.0;
        Agent_Image_Transparency_Variable_Name = "Universe.map.kyoka.ID";
    }
    Output {
        Map_Element_Name = "q_value";
        Map_Element = Space_Variable;
        Output_Expression = "Universe.map.qq";
        Space_Color_Direct_RGB = No;
        Space_Draw_Range = 0.0, 200.0;
        Space_Color_Min = 255, 255, 255;
        Space_Color_Max = 0, 102, 204;
        Marker_Id = 2;
        Icon_Type = 0;
        Icon_Var_Name = "";
        Icon_Transparent = No;
        Icon_Enlarg_Reduce = No;
        Icon_File_Name = "";
        Num_Display = No;
        Num_Var_Name = "";
        Space_Variable_Transparency_by_value = Yes;
        Space_Variable_Transparency_Value = 0.0;
        Space_Variable_Transparency_Variable_Name = "Universe.map.qq";
    }
}


//-------------------------------------------------------
// Numeric Data Window Output Definition Division
//-------------------------------------------------------
Numeric_Output {
    Font_Name = "Dialog";
    Font_Char_Set = 81;
    Font_Size = 12.0;
    Font_Style = 0;
    Font_Color = 0, 0, 0;
    Font_Background_Color = 255, 255, 255;
    Position_x = 235;
    Position_y = 187;
    Size_x = 632;
    Size_y = 596;
    Map_Cell_Size = -1;
    Numeric_Name = "value";
    Title = "value";
    Disable = No;
    Output_Group_Name = "";
    OUTPUT {
        Output_Element_Name = "counter0";
        Figures = 0;
        Format_Id = 0;
        Output_Expression = "universe.map.counter(0).value";
    }
    OUTPUT {
        Output_Element_Name = "counter1";
        Figures = 0;
        Format_Id = 0;
        Output_Expression = "universe.map.counter(1).value";
    }
    OUTPUT {
        Output_Element_Name = "utilityA";
        Figures = 0;
        Format_Id = 0;
        Output_Expression = "universe.map.kyoka(0).afterutility";
    }
    OUTPUT {
        Output_Element_Name = "simulationcount";
        Figures = 0;
        Format_Id = 0;
        Output_Expression = "getcountsimulationnumber()";
    }
}


//-------------------------------------------------------
// Control Panel Definition Division
//-------------------------------------------------------
Control_Panel {
    Display_Area = 0, 0, 100, 100;
}


//-------------------------------------------------------
// Space Initial Value Definition Divsion
//-------------------------------------------------------
Space_Initial {
}


//-------------------------------------------------------
// Other Miscellaneous Data Definition Division
//-------------------------------------------------------
Others_Data {
    Indent = 4;
    Rule_Colored = Yes;
    Window_Hide_Run = 1;
    Debug_Position_x = 75;
    Debug_Position_y = 75;
    Debug_Size_x = 400;
    Debug_Size_y = 200;
    Console_Position_x = -5;
    Console_Position_y = 74;
    Console_Size_x = 493;
    Console_Size_y = 861;
    Componen_Tree_Position_x = 2;
    Componen_Tree_Position_y = 2;
    Componen_Tree_Size_x = 253;
    Componen_Tree_Size_y = 536;
    Console_Background_Color = 16777215;
    Console_Foreground_Color = 255;
    Console_DisplayLines_Max = 500;
    Font_Name = "Meiryo UI";
    Font_Char_Set = 0;
    Font_Size = 16.0;
    Font_Style = 0;
    Font_Color = 0, 0, 0;
    Font_Background_Color = 0, 0, 0;
}


//-------------------------------------------------------
// Network Information Definition Division
//-------------------------------------------------------
Network_Info {
    Global_Space_Area = 0, 0, 100, 100;
    Local_Space_Info {
    }
}


//-------------------------------------------------------
// Space Map Initial Value Definition Division
//-------------------------------------------------------
Space_Map_Initial_Value {
    Space_Path_Name = Universe.map;
    Background_Image_File_Path_Name = "";
    Origin_Position = Left_Bottom;
    Position_Agent {
        Agent_Name = Universe.map.point;
        Marker_Color = 255, 0, 0;
        Marker_Id = 1;
        Value = (10.641263940520446,35.78066914498142,0),(21.79368029739777,35.87360594795539,0),(34.0843631735825,35.96821728791989,0),(10.389664757694497,26.92571753910044,0),(10.389664757694497,17.966944639807096,0)
               ,(22.11142369134934,26.758263840048226,0),(34.16809002310861,26.67453699052212,0),(22.19515054087545,17.715764091228777,0),(34.0006363240564,17.79949094075488,0);
    }
    Link_Agent {
        Agent_Name = Universe.link;
        Line_Color = 0, 255, 0;
        Line_Type = 1;
        Arrow_Type = 1;
        Link_Id = "Universe.map.point/Universe.map.point";
        Link = (0,0,1),(0,1,2),(0,2,6),(0,6,8),(0,8,7)
              ,(0,7,4),(0,4,3),(0,3,5),(0,5,1),(0,5,6)
              ,(0,5,7),(0,3,0);
    }
    Space_Variable {
        Variable = Universe.map.qq,(2500*0.0);
        Marker_Id = 1;
        Min_Value = "";
        Max_Value = "";
        Min_Value_Color = 255, 0, 0;
        Max_Value_Color = 0, 255, 255;
    }
}


//-------------------------------------------------------
// Window Location Definition Division
//-------------------------------------------------------
Window_Rectangle {
    Window_Name = Main_Window, -8, -8, 1936, 1056;
    Window_Name = Output_Setting_Window, 728, 383, 480, 290;
    Window_Name = Artisoc_Help_Window, 297, 325, 752, 400;
}


//-------------------------------------------------------
// Help Favorite Division
//-------------------------------------------------------
Help_Favorite {
}
