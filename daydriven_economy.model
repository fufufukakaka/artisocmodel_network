//====================================================================/
//　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　/
// artisoc                                                            /
//                                                                    /
//====================================================================/

Version = 3.5;



//-------------------------------------------------------
// Component Tree
//-------------------------------------------------------
UNIVERSE {
    Space Map(0,0),Square_2D(50, 50, !Loop, North, 1, !Map_3D){
        AgtType Point(0, 0)[110] {
            Dim ID(0, 0) As Integer = (0);
            Dim X(0, 0) As Double = (0.0);
            Dim Y(0, 0) As Double = (0.0);
            Dim Layer(0, 0) As Integer = (0);
            Dim Direction(0, 0) As Double = (0.0);
            Dim DijkstraValue(0, 0) As Double = (0.0);
            Dim ChoiceAgt(0, 0) As Agt = (0);
            Dim NearAgtSet(0, 0) As AgtSet = ();
            Dim StreetAgt(0, 0) As Agt = (0);
            Dim site(0, 0) As Integer = (0);
            Dim color(0, 0) As Integer = (0);
        }
        AgtType Person(0, 0)[0] {
            Dim ID(0, 0) As Integer = (0);
            Dim X(0, 0) As Double = (0.0);
            Dim Y(0, 0) As Double = (0.0);
            Dim Layer(0, 0) As Integer = (0);
            Dim Direction(0, 0) As Double = (0.0);
            Dim RouteArray(0, 0) As String = ("");
            Dim RouteCount(0, 0) As Integer = (0);
            Dim Color(0, 0) As Integer = (0);
            Dim action(0, 0) As Integer = (0);
            Dim check(0, 0) As Integer = (0);
            Dim nowhome(0, 0) As Integer = (0);
            Dim daycount(0, 0) As Double = (0.0);
            Dim speed(0, 0) As Double = (0.0);
            Dim dist(0, 0) As Double = (0.0);
            Dim archivement(0, 0) As Integer = (0);
            Dim money(0, 0) As Integer = (0);
            Dim goalpointid(0, 0) As Integer = (0);
            Dim consump(0, 0) As Integer = (0);
            Dim potential(0, 0) As Integer = (0);
            Dim timecount(0, 0) As Integer = (0);
            Dim timecount_sum(0, 0) As Integer = (0);
            Dim freetime(0, 0) As Integer = (0);
            Dim freetime_sum(0, 0) As Integer = (0);
            Dim consump_sum(0, 0) As Integer = (0);
        }
        AgtType Block(0, 0)[0] {
            Dim ID(0, 0) As Integer = (0);
            Dim X(0, 0) As Double = (0.0);
            Dim Y(0, 0) As Double = (0.0);
            Dim Layer(0, 0) As Integer = (0);
            Dim Direction(0, 0) As Double = (0.0);
        }
        AgtType government(0, 0)[1] {
            Dim ID(0, 0) As Integer = (0);
            Dim X(0, 0) As Double = (0.0);
            Dim Y(0, 0) As Double = (0.0);
            Dim Layer(0, 0) As Integer = (0);
            Dim Direction(0, 0) As Double = (0.0);
            Dim bridge_status(0, 0)[9] As Integer = (9*0);
            Dim bridge_damage(0, 0)[9] As Integer = (9*0);
            Dim bridge_demand(0, 0)[9] As Integer = (9*0);
            Dim bridge_averagedemand(0, 0) As Double = (0.0);
            Dim bridge_distance(0, 0)[9] As Double = (9*0.0);
        }
        AgtType bridgecore(0, 0)[9] {
            Dim ID(0, 0) As Integer = (0);
            Dim X(0, 0) As Double = (0.0);
            Dim Y(0, 0) As Double = (0.0);
            Dim Layer(0, 0) As Integer = (0);
            Dim Direction(0, 0) As Double = (0.0);
            Dim demand(0, 0) As Integer = (0);
            Dim strength(0, 0) As Integer = (0);
            Dim damage(0, 0) As Integer = (0);
            Dim beginpointid(0, 0) As Integer = (0);
            Dim endpointid(0, 0) As Integer = (0);
            Dim distance(0, 0) As Double = (0.0);
            Dim hasblock(0, 0) As Boolean = (0);
        }
    }
    AgtType Link(0, 0)[282] {
        Dim ID(0, 0) As Integer = (0);
        Dim Begin_agt(0, 0) As Agt = (0);
        Dim End_Agt(0, 0) As Agt = (0);
        Dim StreetAgt(0, 0) As Agt = (0);
        Dim ReverseLinkAgt(0, 0) As Agt = (0);
    }
    AgtType Street(0, 0)[0] {
        Dim ID(0, 0) As Integer = (0);
        Dim Points(0, 0) As String = ("");
        Dim Cost(0, 0) As Double = (0.0);
        Dim ReverseStreetAgt(0, 0) As Agt = (0);
    }
    AgtType DijkstraStreet(0, 0)[0] {
        Dim ID(0, 0) As Integer = (0);
        Dim Route(0, 0) As String = ("");
        Dim Value(0, 0) As Double = (0.0);
        Dim StreetRoute(0, 0) As String = ("");
    }
    AgtType StreetBackup(0, 0)[0] {
        Dim ID(0, 0) As Integer = (0);
        Dim StreetAgt(0, 0) As Agt = (0);
        Dim Points(0, 0) As String = ("");
        Dim Cost(0, 0) As Double = (0.0);
        Dim ReverseStreetAgt(0, 0) As Agt = (0);
    }
    AgtType PointBackup(0, 0)[0] {
        Dim ID(0, 0) As Integer = (0);
        Dim PointAgt(0, 0) As Agt = (0);
        Dim StreetAgt(0, 0) As Agt = (0);
    }
    Dim TemporaryStreetAgtset(0, 0) As AgtSet = ();
    Dim shoplist(0, 0)[5] As Integer = (5*0);
    Dim officelist(0, 0)[5] As Integer = (5*0);
    Dim numberofendagt(0, 0) <5>  As Integer = (0);
    Dim day(0, 0) <10>  As Double = (0.0);
    Dim checkmode(0, 0) As Boolean = ();
    Dim daychange(0, 0) As Boolean = ();
}


//-------------------------------------------------------
// Agent Variable Initial Data
//-------------------------------------------------------
Initial_Value {
    UNIVERSE.MAP.POINT.X = 110(44.991055456171736, 42.486583184257604, 43.20214669051879, 46.86940966010734, 45.16994633273703, 40.96601073345259, 43.82826475849731, 45.52772808586762, 48.21109123434705, 47.49552772808587
, 42.039355992844364, 46.69051878354204, 41.77101967799642, 43.47048300536673, 46.601073345259394, 44.72271914132379, 41.94991055456172, 47.13774597495528, 49.28443649373882, 48.83720930232558
, 43.38103756708408, 37.2093023255814, 36.76207513416816, 38.46153846153846, 41.59212880143113, 37.47763864042934, 33.72093023255814, 35.3309481216458, 38.550983899821105, 39.803220035778175
, 36.85152057245081, 37.29874776386404, 38.81932021466905, 37.65652951699463, 38.550983899821105, 40.96601073345259, 34.97316636851521, 34.16815742397138, 37.83542039355993, 40.33989266547406
, 47.76386404293381, 29.427549194991055, 29.338103756708406, 2*29.427549194991055, 29.24865831842576, 2*29.159212880143112, 29.60644007155635, 29.785330948121647, 29.695885509838998, 30.500894454382827
, 31.127012522361362, 30.232558139534884, 31.037567084078713, 30.41144901610018, 3.1305903398926667, 1.967799642218246, 6.797853309481216, 0.8944543828264742, 4.83005366726297, 8.228980322003576
, 4.293381037567084, 2.5939177101967807, 2.8622540250447237, 10.465116279069766, 8.050089445438282, 2.772808586762075, 2.236135957066189, 1.699463327370303, 4.472271914132378, 6.797853309481216
, 5.277280858676207, 5.098389982110913, 8.318425760286225, 9.838998211091234, 13.595706618962433, 12.790697674418604, 14.490161001788909, 13.595706618962433, 11.180679785330948, 5.813953488372093
, 9.481216457960643, 2*13.416815742397137, 10.822898032200358, 9.033989266547406, 12.611806797853308, 17.262969588550984, 10.822898032200358, 8.765652951699462, 13.595706618962433, 8.676207513416816
, 5.54561717352415, 9.391771019677996, 6.8872987477638645, 16.368515205724506, 17.88908765652952, 18.6046511627907, 18.51520572450805, 17.88908765652952, 19.23076923076923, 20.304114490161002
, 17.79964221824687, 15.026833631484793, 15.384615384615385, 15.56350626118068, 14.04293381037567, 15.116279069767442, 16.27906976744186);
    UNIVERSE.MAP.POINT.Y = 110(43.112701252236135, 43.20214669051879, 40.429338103756706, 37.924865831842574, 34.34704830053667, 33.18425760286225, 28.354203935599283, 25.670840787119857, 28.443649373881932, 20.125223613595708
, 18.872987477638638, 15.921288014311273, 14.758497316636848, 11.359570661896242, 10.644007155635066, 5.992844364937383, 7.781753130590339, 3.398926654740606, 5.903398926654745, 0.8050089445438289
, 46.2432915921288, 42.39713774597496, 37.83542039355993, 34.883720930232556, 37.11985688729875, 31.48479427549195, 37.11985688729875, 28.354203935599283, 25.58139534883721, 20.840787119856888
, 15.563506261180677, 12.880143112701248, 10.017889087656528, 5.187835420393554, 2.0572450805008913, 2.593917710196777, 42.039355992844364, 45.43828264758497, 47.227191413237925, 47.76386404293381
, 45.796064400715565, 48.21109123434705, 45.70661896243291, 41.14490161001789, 39.355992844364934, 35.688729874776385, 33.09481216457961, 28.80143112701252, 25.760286225402503, 23.70304114490161
, 19.677996422182467, 17.71019677996422, 12.254025044722717, 8.944543828264756, 6.171735241502688, 1.6100178890876577, 47.13774597495528, 42.39713774597496, 35.509838998211094, 30.85867620751342
, 24.239713774597497, 25.22361359570662, 18.783542039355993, 21.10912343470483, 15.474060822898032, 14.579606440071558, 12.611806797853305, 11.896243291592128, 9.302325581395351, 5.635062611806802
, 2.9516994633273725, 2.1466905187835437, 5.992844364937383, 8.676207513416813, 9.033989266547408, 6.529516994633269, 3.2200357781753155, 7.42397137745975, 11.53846153846154, 16.368515205724506
, 17.262969588550988, 17.08407871198569, 21.10912343470483, 20.39355992844365, 27.191413237924866, 27.638640429338103, 2*31.932021466905187, 28.354203935599283, 37.11985688729875, 39.71377459749553
, 39.98211091234347, 43.38103756708408, 45.974955277280856, 46.779964221824685, 48.56887298747764, 1.699463327370303, 4.203935599284435, 9.212880143112699, 13.506261180679786, 18.783542039355993
, 23.076923076923077, 28.08586762075134, 31.3953488372093, 34.704830053667266, 37.29874776386404, 41.50268336314848, 44.5438282647585, 46.601073345259394, 47.94275491949911);
    UNIVERSE.MAP.POINT.LAYER = 110(110*0);
    UNIVERSE.MAP.POINT.DIRECTION = 110(110*0.0);
    UNIVERSE.MAP.POINT.DIJKSTRAVALUE = 110(110*0.0);
    UNIVERSE.MAP.POINT.SITE = 110(20*1, 90*0);
    UNIVERSE.MAP.POINT.COLOR = 110(110*0);
    UNIVERSE.MAP.GOVERNMENT.X = 1(24.41860465116279);
    UNIVERSE.MAP.GOVERNMENT.Y = 1(23.613595706618963);
    UNIVERSE.MAP.GOVERNMENT.LAYER = 1(0);
    UNIVERSE.MAP.GOVERNMENT.DIRECTION = 1(0.0);
    UNIVERSE.MAP.GOVERNMENT.BRIDGE_STATUS = 1(9*0);
    UNIVERSE.MAP.BRIDGECORE.X = 9(22.361359570661897, 22.003577817531305, 22.361359570661897, 21.82468694096601, 22.003577817531305, 21.735241502683362, 24.955277280858677, 23.166368515205725, 22.719141323792485);
    UNIVERSE.MAP.BRIDGECORE.Y = 9(44.812164579606446, 38.64042933810376, 34.61538461538461, 29.427549194991055, 23.881932021466906, 19.856887298747765, 11.449016100178895, 6.082289803220036, 3.4883720930232585);
    UNIVERSE.MAP.BRIDGECORE.LAYER = 9(9*0);
    UNIVERSE.MAP.BRIDGECORE.DIRECTION = 9(9*0.0);
    UNIVERSE.MAP.BRIDGECORE.DEMAND = 9(9*0);
    UNIVERSE.MAP.BRIDGECORE.STRENGTH = 9(9*0);
    UNIVERSE.MAP.BRIDGECORE.DAMAGE = 9(9*0);
    UNIVERSE.MAP.BRIDGECORE.BEGINPOINTID = 9(43, 45, 44, 50, 46, 45, 51, 55, 54);
    UNIVERSE.MAP.BRIDGECORE.ENDPOINTID = 9(109, 106, 103, 105, 100, 99, 97, 98, 96);
}


//-------------------------------------------------------
// Agent Rule
//-------------------------------------------------------
#begin_rule UNIVERSE
include"dijkstra.inc"

Univ_Init{
initialize_dijkstra()

dim list as agtset
dim one as agt
dim one1 as agt
dim i as integer
dim j as integer
dim c as integer
dim shops as agtset
dim offices as agtset
dim optionlist(40) as integer
dim shoplist(5) as integer
dim officelist(5) as integer

// 候補地のノードIDを格納
for i = 0 to 39
	optionlist(i) = i + 56
next i
// 全要素をシャッフルして上から順次officelist,shoplistに格納していく
for i = 0 to 39
	j = Int(rnd() * 39)
	c = optionlist(i)
	optionlist(i) = optionlist(j)
	optionlist(j) = c
next i
for i = 0 to 4
	shoplist(i) = optionlist(i)
	officelist(i) = optionlist(i + 5)
	universe.shoplist(i) = shoplist(i)
	universe.officelist(i) = officelist(i)
next i

// 指定されたIDのノードをオフィス、店に指定
for i = 0 to 4 
	universe.Map.Point(shoplist(i)).site = 2
	universe.Map.Point(officelist(i)).site = 3
next i
}

Univ_Step_Begin{

// 橋の点検モードに入るか否か
if Int(cdbl(round(gethistory(universe.day,2)*1000)/1000)) mod 5 == 4 and cdbl(round(universe.day*1000)/1000) mod 5 == 0 then
	universe.checkmode = TRUE
else
	universe.checkmode = FALSE
end if

// 日付が変更されたか否か
if universe.numberofendagt == 19 then
	universe.daychange = TRUE
else
	universe.daychange = FALSE
end if

dim list as agtset
	dim one as agt
	dim one1 as agt
	dim i as integer
	dim j as integer
	dim c as integer
	dim shops as agtset
	dim offices as agtset
	dim optionlist(40) as integer
	dim shoplist(5) as integer
	dim officelist(5) as integer
	
// 1日が終了したらオフィスと店の場所をシャッフルする
if  universe.daychange == TRUE then
println("good")
// 候補地のノードIDを格納
	for i = 0 to 39
		optionlist(i) = i + 56
	next i
// 全要素をシャッフルして上から順次officelist,shoplistに格納していく
	for i = 0 to 39
		universe.Map.Point(optionlist(i)).site = 0
		j = Int(rnd() * 39)
		c = optionlist(i)
		optionlist(i) = optionlist(j)
		optionlist(j) = c
	next i
	for i = 0 to 4
		shoplist(i) = optionlist(i)
		officelist(i) = optionlist(i + 5)
		universe.shoplist(i) = shoplist(i)
		universe.officelist(i) = officelist(i)
	next i

// 指定されたIDのノードをオフィス、店に指定
	for i = 0 to 4 
		universe.Map.Point(shoplist(i)).site = 2
		universe.Map.Point(officelist(i)).site = 3
	next i
end if
universe.day = 0
universe.numberofendagt = 0
}

Univ_Step_End{

/*
openfilecsv("test0930.csv",2,3)
writefilecsv(2,universe.day,false)
writefilecsv(2,universe.Map.bridgecore(0).demand,false)
writefilecsv(2,universe.Map.bridgecore(1).demand,false)
writefilecsv(2,universe.Map.bridgecore(2).demand,false)
writefilecsv(2,universe.Map.bridgecore(3).demand,false)
writefilecsv(2,universe.Map.bridgecore(4).demand,false)
writefilecsv(2,universe.Map.bridgecore(5).demand,false)
writefilecsv(2,universe.Map.bridgecore(6).demand,false)
writefilecsv(2,universe.Map.bridgecore(7).demand,false)
writefilecsv(2,universe.Map.bridgecore(8).demand,true)
closefilecsv(2)
*/

}

Univ_Finish{

}

sub create_block(countStep as Long, beginPointID as integer, endPointID as integer, newCost as Double)
{
dim streetagt as agt
dim beginpointagt as agt
dim endpointagt as agt
dim blockagt as agt

if getcountstep() == countstep then
	update_cost(beginpointid, endpointid,newcost)
	beginpointagt = universe.Map.Point(beginpointid)
	endpointagt = universe.Map.Point(endpointid)
	blockagt = createagt(universe.Map.block)
	blockagt.x = (beginpointagt.x + endpointagt.x) / 2
	blockagt.y = (beginpointagt.y + endpointagt.y) / 2
end if
	
}
#end_rule UNIVERSE




//-------------------------------------------------------
// Agent Rule
//-------------------------------------------------------
#begin_rule UNIVERSE.MAP.POINT
Agt_Init{
dim personAgt as agt
dim firstsight as string

//最初の一回は必ずオフィス(一日目)
if rnd() < 0.2 then
		firstsight = universe.officelist(0)
elseif rnd() < 0.4 then
		firstsight = universe.officelist(1)
elseif rnd() < 0.6 then
		firstsight = universe.officelist(2)
elseif rnd() < 0.8 then
		firstsight = universe.officelist(3)
else
		firstsight = universe.officelist(4)
end if

If My.site == 1  Then
	personAgt = createagt(universe.Map.Person)
	personAgt.x = my.X
	personAgt.y = my.Y
	personAgt.RouteArray = @dijkstra(my.ID, CStr(firstsight))
	personAgt.RouteCount = 1
end if

}

Agt_Step{
// siteが1なら家、2ならオフィス、3なら店
if my.site == 0 then
	my.color = COLOR_RED
elseif my.site == 1 then
	my.color = COLOR_BLUE
elseif my.site == 2 then
	my.color = COLOR_GREEN
elseif my.site == 3 then
	my.color = COLOR_CYAN
end if
}
#end_rule UNIVERSE.MAP.POINT




//-------------------------------------------------------
// Agent Rule
//-------------------------------------------------------
#begin_rule UNIVERSE.MAP.PERSON


Agt_Init{
my.Color = COLOR_BLUE
my.action = 1
my.check = 0
my.nowhome = 0
my.daycount = 1
my.speed = 1
my.archivement = 0
my.money = 200000
my.timecount = 0
my.timecount_sum = 0
my.freetime = 0
my.freetime_sum = 0
my.consump = norminv(rnd(),9360,int(rnd()*5000) + 500)
my.potential = norminv(rnd(),14581,int(rnd()*5000) + 500)
}

Agt_Step{
	Dim targetPointAgt As Agt
	Dim distance As Double
	Dim lastTargetPointAgt As Agt
	Dim streetAgt As Agt
	dim set as agtset
	dim one as agt
	dim CNo as integer
my.timecount = my.timecount + 1
universe.numberofendagt = universe.numberofendagt + my.nowhome
universe.day = universe.day + (my.daycount / countagt(universe.Map.Person))

// 日数が30の倍数ならarchivementをmoneyに換算する(今はテストなので5の倍数にしているよ。ここの処理ではズレが生じるのであとでgovernmentのものにさしかえるよ)
if universe.daychange == TRUE then
	my.money = my.money + my.archivement
	my.archivement = 0
end if

// 進む速度の定義
forward(1)
makeoneagtsetaroundown(set,1,universe.Map.Person,false)
CNo = countagtset(set)
forward(-1)
if CNo >= 1 then
	for each one in set
		if abs(one.direction - my.Direction) <> 180 then
			distance = measuredistance(my.X,my.y,one.x,one.y,universe.map)
			one.dist = distance
		end if
	next one
	
	// 一番近い距離の
	sortagtset(set,"dist",true)
	one = getagt(set,0)
	
	// 車間距離に応じたスピードの定義
	if abs(one.direction - my.Direction) == 180 then // 反対車線にいる場合は平均速度(1)で
		my.speed = 1
	else
		my.speed = 30*(tanh((one.dist-10)/3)+tanh(10/3)) //GithubのIssuesを参考に
	end if
elseif CNo == 0 then //誰もいないなら最高速度(2)で
	my.speed = 2
end if

//下限界は0.333(10km/hのイメージ)
if my.speed < 0.333 then
	my.speed = 0.333
end if

//ダイクストラ法に基づいて進む
if  gethistory(universe.numberofendagt,1) == 20  then
	my.nowhome = 0
	targetPointAgt = Universe.Map.Point(CInt(GetToken(My.RouteArray, My.RouteCount)))
	my.daycount = my.daycount + 0.5
	if rnd() < 2/7 then
		shoproute(targetpointagt)
	else
		jobroute(targetpointagt)
	end if
end if
	If my.nowhome == 1  Then
		// 立ち止まる
		My.Color = COLOR_WHITE
		
		// 余暇時間とかの計測
		my.timecount = 0
		my.freetime = my.freetime + 1
	ElseIf my.nowhome == 0 and My.RouteCount < CountToken(My.RouteArray) Then
		my.freetime_sum = my.freetime_sum + my.freetime
		my.freetime = 0
		// 経路に沿って進む
		targetPointAgt = Universe.Map.Point(CInt(GetToken(My.RouteArray, My.RouteCount)))
		distance = Pursue(targetPointAgt, my.speed)
		
		If distance > 0 Then
			// 次のPointに到着したとき
			lastTargetPointAgt = Universe.Map.Point(CInt(GetToken(My.RouteArray, My.RouteCount)))
			My.RouteCount = My.RouteCount + 1
			If CountToken(My.RouteArray) > My.RouteCount Then
				targetPointAgt = Universe.Map.Point(CInt(GetToken(My.RouteArray, My.RouteCount)))
				streetAgt = @get_street_from_points(lastTargetPointAgt.ID, targetPointAgt.ID)
				If streetAgt.Cost == 10000 Then
					// StreetのCostが10000の場合は経路を再探索する
					reroute(targetPointAgt)
				Else
					// 余剰分、次のPointへ向かう
					Pursue(targetPointAgt, distance)
				End If
			Else
				// 目的地に到着
				if my.action == 1 then
					// 店なら消費して効用を得る
					if universe.Map.Point(my.goalpointid).site == 2 then
						my.consump_sum = my.consump_sum + my.consump
						my.money = my.money - my.consump
					// オフィスなら将来受け取る成果を積み上げる
					elseif universe.Map.Point(my.goalpointid).site == 3 then
						my.archivement = my.archivement + my.potential
					end if
					my.action = 0
					my.check = 0
					homeroute(targetpointagt)
				// 帰宅し、明日に備える
				elseif my.action == 0 then
					my.action = 1
					my.nowhome = 1
					my.timecount_sum = my.timecount_sum + my.timecount
					my.timecount = 0
				end if
			End If
		End If
	End If
}

// 経路を再探索する
Sub reroute(targetPointAgt As Agt)
{
	Dim startPointAgt As Agt
	Dim goalPointID As Integer
	Dim newRoute As String
	Dim lastRouteArray As String
	Dim i As Integer
	
	// 現在地点から経路を再探索する
	startPointAgt = Universe.Map.Point(CInt(GetToken(My.RouteArray, My.RouteCount - 1)))
	goalPointID = CInt(gettoken(my.RouteArray,counttoken(my.RouteArray)-1))
	newRoute = @dijkstra(startPointAgt.ID, CStr(goalPointID))
		
	lastRouteArray = My.RouteArray
	My.RouteArray = ""
	
	// これまでに通った経路を格納する
	For i=0 To My.RouteCount - 2
		My.RouteArray = My.RouteArray & GetToken(lastRouteArray, i) & ","
	Next i
	
	// 新しい経路を追加する
	My.RouteArray = My.RouteArray & newRoute
	
	// エージェントの色を変更する
	My.Color = COLOR_YELLOW
}

Sub homeroute(targetPointAgt As Agt)
{
	Dim startPointAgt As Agt
	Dim goalPointID As Integer
	Dim newRoute As String
	Dim lastRouteArray As String
	Dim i As Integer
	
	// 現在地点から経路を再探索する
	startPointAgt = Universe.Map.Point(CInt(GetToken(My.RouteArray, My.RouteCount - 1)))
	goalPointID = my.ID
	newRoute = @dijkstra(startPointAgt.ID, CStr(goalPointID))
		
	lastRouteArray = My.RouteArray
	My.RouteArray = ""
	
	// これまでに通った経路を格納する
	For i=0 To My.RouteCount - 2
		My.RouteArray = My.RouteArray & GetToken(lastRouteArray, i) & ","
	Next i
	
	// 新しい経路を追加する
	My.RouteArray = My.RouteArray & newRoute
	
	// エージェントの色を変更する
	My.Color = COLOR_YELLOW
}

Sub shoproute(targetPointAgt As Agt)
{
	Dim startPointID As Integer
	Dim goalPointID As Integer
	Dim newRoute As String
	Dim lastRouteArray As String
	Dim i As Integer
	
	// 現在地点から経路を再探索する
	// どのshopに向かうかをランダムに決める
	startPointid = my.ID
	if rnd() < 0.2 then
		goalPointID = universe.shoplist(0)
	elseif rnd() < 0.4 then
		goalPointID = universe.shoplist(1)
	elseif rnd() < 0.6 then
		goalPointID = universe.shoplist(2)
	elseif rnd() < 0.8 then
		goalPointID = universe.shoplist(3)
	else
		goalPointID = universe.shoplist(4)
	end if
	my.goalpointid = goalpointid
	newRoute = @dijkstra(startPointID, CStr(goalPointID))
		
	lastRouteArray = My.RouteArray
	My.RouteArray = ""
	
	// これまでに通った経路を格納する
	For i=0 To My.RouteCount - 2
		My.RouteArray = My.RouteArray & GetToken(lastRouteArray, i) & ","
	Next i
	
	// 新しい経路を追加する
	My.RouteArray = My.RouteArray & newRoute
	
	// エージェントの色を変更する
	My.Color = COLOR_CYAN
}

Sub jobroute(targetPointAgt As Agt)
{
	Dim startPointID As Integer
	Dim goalPointID As Integer
	Dim newRoute As String
	Dim lastRouteArray As String
	Dim i As Integer
	
	// 現在地点から経路を再探索する
	// どのofiiceに向かうかをランダムに決める
	startPointid = my.ID
	if rnd() < 0.2 then
		goalPointID = universe.officelist(0)
	elseif rnd() < 0.4 then
		goalPointID = universe.officelist(1)
	elseif rnd() < 0.6 then
		goalPointID = universe.officelist(2)
	elseif rnd() < 0.8 then
		goalPointID = universe.officelist(3)
	else
		goalPointID = universe.officelist(4)
	end if
	my.goalpointid = goalpointid
	newRoute = @dijkstra(startPointID, CStr(goalPointID))
		
	lastRouteArray = My.RouteArray
	My.RouteArray = ""
	
	// これまでに通った経路を格納する
	For i=0 To My.RouteCount - 2
		My.RouteArray = My.RouteArray & GetToken(lastRouteArray, i) & ","
	Next i
	
	// 新しい経路を追加する
	My.RouteArray = My.RouteArray & newRoute
	
	// エージェントの色を変更する
	My.Color = COLOR_GREEN
}
#end_rule UNIVERSE.MAP.PERSON




//-------------------------------------------------------
// Agent Rule
//-------------------------------------------------------
#begin_rule UNIVERSE.MAP.BLOCK
Agt_Init{

}

Agt_Step{

}
#end_rule UNIVERSE.MAP.BLOCK




//-------------------------------------------------------
// Agent Rule
//-------------------------------------------------------
#begin_rule UNIVERSE.MAP.GOVERNMENT
include "dijkstra.inc"

Agt_Init{
my.X = 25
my.Y = 25

}

Agt_Step{
dim one as agt
dim blockagt as agt
dim set as agtset
dim i as integer

makeoneagtsetaroundown(set,1,universe.Map.Block,false)
for i = 0 to 8
	my.bridge_status(i) = universe.Map.bridgecore(i).strength
	my.bridge_damage(i) = universe.Map.bridgecore(i).damage
	my.bridge_demand(i) = universe.Map.bridgecore(i).demand
	my.bridge_averagedemand = my.bridge_averagedemand + my.bridge_demand(i) / 9
	my.bridge_distance(i) = universe.Map.bridgecore(i).distance
next i

// 30日ごとに橋を点検(今は5日ごとに点検を行う)(universeで日付と同期)
if universe.checkmode == TRUE then
	println("good")
	for i = 0 to 8	
// 今季の減少分から判断して来季には崩壊する橋を通行止めにする
	if my.bridge_status(i) < my.bridge_damage(i) then
		universe.Map.bridgecore(i).hasblock = TRUE
		blockagt = createagt(universe.Map.block)
		blockagt.x = universe.Map.bridgecore(i).x
		blockagt.y = universe.Map.bridgecore(i).y
		update_cost(universe.Map.bridgecore(i).beginpointid,universe.Map.bridgecore(i).endpointid,10000)
	end if
	
// 通行止めにした橋の値が〜(今は平均以上なら)なら橋の耐久値を回復し、通行止めを解除する(コストを元に戻す)
	if universe.Map.bridgecore(i).hasblock == TRUE then
		if  my.bridge_demand(i) >=  my.bridge_averagedemand then
			universe.Map.bridgecore(i).strength = universe.Map.bridgecore(i).strength + 10000                            update_cost(universe.Map.bridgecore(i).beginpointid,universe.Map.bridgecore(i).endpointid,universe.Map.bridgecore(i).distance)
            universe.Map.bridgecore(i).hasblock = FALSE
// 通行止めにした橋の値が〜以下なら通行止めのまま
        end if
	end if
	my.bridge_damage(i) = 0
	my.bridge_demand(i) = 0
	universe.Map.bridgecore(i).demand = 0
	universe.Map.bridgecore(i).damage = 0
	next i
end if
}
#end_rule UNIVERSE.MAP.GOVERNMENT




//-------------------------------------------------------
// Agent Rule
//-------------------------------------------------------
#begin_rule UNIVERSE.MAP.BRIDGECORE
include"dijkstra.inc"

Agt_Init{
my.strength = 5000
my.damage = 0
my.demand = 0
my.distance = measuredistance(universe.Map.Point(my.beginpointid).x,universe.Map.Point(my.beginpointid).x,universe.Map.Point(my.endpointid).x,universe.Map.Point(my.endpointid).y,universe.Map)
my.hasblock = FALSE
}

Agt_Step{
dim set as agtset
dim blockset as agtset
dim one as agt
dim blockagt as agt

my.strength = my.strength - 1
my.damage = my.damage + 1
makeoneagtsetaroundown(blockset,1,universe.Map.Block,false)

// personが来たらdemand(経済価値or需要)を増加させる
makeoneagtsetaroundown(set,2,universe.Map.Person,false)
for each one in set
	if one.check == 0 then
		my.demand = my.demand + one.consump
		my.strength = my.strength - 5
		my.damage = my.damage + 5
		one.check = 1
	end if
next one

// フラグが消去されているのにblockがあるならそれを消去する
if my.hasblock == FALSE then
	if countagtset(blockset) > 0 then
		one = getagt(blockset,Int(rnd() * countagtset(blockset)))
		delagt(one)
	end if
end if

// もし耐久値が負になってしまったら、崩落したと判断して自身のコストを10000にする。
if my.strength <= 0 then
	my.strength = 0
// まだブロックがないなら置いてコストを10000にする
	if countagtset(blockset) == 0 then
		blockagt = createagt(universe.Map.block)
		blockagt.x = my.x
		blockagt.y = my.y
		update_cost(my.beginpointid,my.endpointid,10000)
		my.hasblock = TRUE
	end if
end if
}
#end_rule UNIVERSE.MAP.BRIDGECORE




//-------------------------------------------------------
// Agent Rule
//-------------------------------------------------------
#begin_rule UNIVERSE.LINK
Agt_Init{

}

Agt_Step{

}
#end_rule UNIVERSE.LINK




//-------------------------------------------------------
// Agent Rule
//-------------------------------------------------------
#begin_rule UNIVERSE.STREET
Agt_Init{

}

Agt_Step{

}
#end_rule UNIVERSE.STREET




//-------------------------------------------------------
// Agent Rule
//-------------------------------------------------------
#begin_rule UNIVERSE.DIJKSTRASTREET
Agt_Init{

}

Agt_Step{

}
#end_rule UNIVERSE.DIJKSTRASTREET




//-------------------------------------------------------
// Agent Rule
//-------------------------------------------------------
#begin_rule UNIVERSE.STREETBACKUP
Agt_Init{

}

Agt_Step{

}
#end_rule UNIVERSE.STREETBACKUP




//-------------------------------------------------------
// Agent Rule
//-------------------------------------------------------
#begin_rule UNIVERSE.POINTBACKUP
Agt_Init{

}

Agt_Step{

}
#end_rule UNIVERSE.POINTBACKUP




//-------------------------------------------------------
// Simulation Definition Division
//-------------------------------------------------------
Single_Simulation {
    Step_Max = 0;
    Time_Max = 0;
    End_Condition = "";
    Exec_Wait = 100;
    Exec_Order = Component;
    Exec_Order_Random_First_Step_Only = No;
    Random_Seed = 0;
    Redraw_Timing = Step;
    Redraw_Interval = 1;
    Garbage_Interval = 0;
}


//-------------------------------------------------------
// Simulation Loop Definition Division
//-------------------------------------------------------
Repeat_Simulation {
    Value_Change = None;
    Initial_Value_Change_None {
        Repeat_Max = 10;
    }
}


//-------------------------------------------------------
// Executing Order By Agent Component Definition Division
//-------------------------------------------------------
Executing_Order_Component {
    Component_Priority = "Universe.Map.Point", 1;
    Component_Priority = "Universe.Map.Person", 1;
    Component_Priority = "Universe.Map.Block", 1;
    Component_Priority = "Universe.Map.government", 1;
    Component_Priority = "Universe.Map.bridgecore", 1;
    Component_Priority = "Universe.Link", 1;
    Component_Priority = "Universe.Street", 1;
    Component_Priority = "Universe.DijkstraStreet", 1;
    Component_Priority = "Universe.StreetBackup", 1;
    Component_Priority = "Universe.PointBackup", 1;
}


//-------------------------------------------------------
// 2 Dimension Map Display Definition Division
//-------------------------------------------------------
Map_Output {
    Map_Space_Name = "Universe.Map";
    Map_Name = "Map";
    Title = "Map";
    Disable = No;
    Background_Color = 255, 255, 255;
    Position_x = 546;
    Position_y = 14;
    Size_x = 753;
    Size_y = 522;
    Remarks = Yes;
    Map_Cell_Size = 8;
    Legend_Pos = Top;
    Font_Name = "Dialog";
    Font_Char_Set = 81;
    Font_Size = 12.0;
    Font_Style = 0;
    Font_Color = 0, 0, 0;
    Font_Background_Color = 255, 255, 255;
    FastDraw = Yes;
    Draw_Timing = Simulation_Step;
    Draw_Interval = 1;
    Axis_Label = "", "";
    Draw_Range = 0, 0, 50, 50;
    Ruled_Line = No;
    Text_Display = No;
    Text_Display_Variable_Name = "";
    Chess_Type_Display_Position = Yes;
    Background_Transparent = No;
    Target_Layer = 0;
    Coordinate_Display = No;
    Space_Kind = Square_2D;
    BG_Pict = Yes;
    BG_Type = 0;
    BG_Var_Name = "";
    BG_File_Name = "map.jpg";
    Origin_Position = 2;
    Output_Group_Name = "";
    Output {
        Map_Element_Name = "Point";
        Map_Element = Agent_Variable;
        Output_Expression = "Universe.Map.Point";
        Draw_Line = Yes;
        Collection_Name = "Universe.Map.Point.NearAgtSet";
        Line_Type = 1;
        Line_Arrow = 1;
        Line_Width = 1;
        Line_Color = 0, 255, 51;
        Line_Type_Variable = "";
        Line_Arrow_Variable = "";
        Line_Width_Variable = "";
        Line_Color_Variable = "";
        Agent_Color = "Universe.Map.Point.color";
        Marker_Id = 1;
        Effective_Figures = 0;
        Format_Id = 0;
        Agent_Image_Direction = No;
        Icon_Type = 0;
        Icon_Var_Name = "";
        Icon_Transparent = No;
        Icon_Enlarg_Reduce = No;
        Icon_File_Name = "";
        Num_Display = Yes;
        Num_Var_Name = "Universe.Map.Point.ID";
        Agent_Image_Magnify_by_value = Yes;
        Agent_Image_Magnify_Value = 1.0;
        Agent_Image_Magnify_Variable_Name = "Universe.Map.Point.ID";
        Agent_Image_Transparency_by_value = Yes;
        Agent_Image_Transparency_Value = 0.0;
        Agent_Image_Transparency_Variable_Name = "Universe.Map.Point.ID";
    }
    Output {
        Map_Element_Name = "Person";
        Map_Element = Agent_Variable;
        Output_Expression = "Universe.Map.Person";
        Draw_Line = No;
        Collection_Name = "";
        Line_Type = 0;
        Line_Arrow = 0;
        Line_Width = 0;
        Line_Color = 0, 0, 0;
        Line_Type_Variable = "";
        Line_Arrow_Variable = "";
        Line_Width_Variable = "";
        Line_Color_Variable = "";
        Agent_Color = "Universe.Map.Person.Color";
        Marker_Id = 1;
        Effective_Figures = 0;
        Format_Id = 0;
        Agent_Image_Direction = No;
        Icon_Type = 0;
        Icon_Var_Name = "";
        Icon_Transparent = No;
        Icon_Enlarg_Reduce = No;
        Icon_File_Name = "";
        Num_Display = Yes;
        Num_Var_Name = "Universe.Map.Person.action";
        Agent_Image_Magnify_by_value = Yes;
        Agent_Image_Magnify_Value = 1.0;
        Agent_Image_Magnify_Variable_Name = "Universe.Map.Person.ID";
        Agent_Image_Transparency_by_value = Yes;
        Agent_Image_Transparency_Value = 0.0;
        Agent_Image_Transparency_Variable_Name = "Universe.Map.Person.ID";
    }
    Output {
        Map_Element_Name = "Block";
        Map_Element = Agent_Variable;
        Output_Expression = "Universe.Map.Block";
        Draw_Line = No;
        Collection_Name = "";
        Line_Type = 0;
        Line_Arrow = 0;
        Line_Width = 0;
        Line_Color = 0, 0, 0;
        Line_Type_Variable = "";
        Line_Arrow_Variable = "";
        Line_Width_Variable = "";
        Line_Color_Variable = "";
        Agent_Color = 0,255,204;
        Marker_Id = 4;
        Effective_Figures = 0;
        Format_Id = 0;
        Agent_Image_Direction = No;
        Icon_Type = 0;
        Icon_Var_Name = "";
        Icon_Transparent = No;
        Icon_Enlarg_Reduce = No;
        Icon_File_Name = "";
        Num_Display = No;
        Num_Var_Name = "";
        Agent_Image_Magnify_by_value = Yes;
        Agent_Image_Magnify_Value = 1.0;
        Agent_Image_Magnify_Variable_Name = "Universe.Map.Block.ID";
        Agent_Image_Transparency_by_value = Yes;
        Agent_Image_Transparency_Value = 0.0;
        Agent_Image_Transparency_Variable_Name = "Universe.Map.Block.ID";
    }
    Output {
        Map_Element_Name = "government";
        Map_Element = Agent_Variable;
        Output_Expression = "Universe.Map.government";
        Draw_Line = No;
        Collection_Name = "";
        Line_Type = 0;
        Line_Arrow = 0;
        Line_Width = 0;
        Line_Color = 0, 0, 0;
        Line_Type_Variable = "";
        Line_Arrow_Variable = "";
        Line_Width_Variable = "";
        Line_Color_Variable = "";
        Agent_Color = 0,0,0;
        Marker_Id = 1;
        Effective_Figures = 0;
        Format_Id = 0;
        Agent_Image_Direction = No;
        Icon_Type = 0;
        Icon_Var_Name = "";
        Icon_Transparent = No;
        Icon_Enlarg_Reduce = No;
        Icon_File_Name = "";
        Num_Display = No;
        Num_Var_Name = "";
        Agent_Image_Magnify_by_value = Yes;
        Agent_Image_Magnify_Value = 1.1;
        Agent_Image_Magnify_Variable_Name = "Universe.Map.government.ID";
        Agent_Image_Transparency_by_value = Yes;
        Agent_Image_Transparency_Value = 0.0;
        Agent_Image_Transparency_Variable_Name = "Universe.Map.government.ID";
    }
    Output {
        Map_Element_Name = "bridgecore";
        Map_Element = Agent_Variable;
        Output_Expression = "Universe.Map.bridgecore";
        Draw_Line = No;
        Collection_Name = "";
        Line_Type = 0;
        Line_Arrow = 0;
        Line_Width = 0;
        Line_Color = 0, 0, 0;
        Line_Type_Variable = "";
        Line_Arrow_Variable = "";
        Line_Width_Variable = "";
        Line_Color_Variable = "";
        Agent_Color = 255,0,204;
        Marker_Id = 1;
        Effective_Figures = 0;
        Format_Id = 0;
        Agent_Image_Direction = No;
        Icon_Type = 0;
        Icon_Var_Name = "";
        Icon_Transparent = No;
        Icon_Enlarg_Reduce = No;
        Icon_File_Name = "";
        Num_Display = Yes;
        Num_Var_Name = "Universe.Map.bridgecore.ID";
        Agent_Image_Magnify_by_value = Yes;
        Agent_Image_Magnify_Value = 1.0;
        Agent_Image_Magnify_Variable_Name = "Universe.Map.bridgecore.ID";
        Agent_Image_Transparency_by_value = Yes;
        Agent_Image_Transparency_Value = 0.0;
        Agent_Image_Transparency_Variable_Name = "Universe.Map.bridgecore.ID";
    }
}


//-------------------------------------------------------
// Time Graph Output Definition Division
//-------------------------------------------------------
Time_Graph {
    Font_Name = "Dialog";
    Font_Char_Set = 81;
    Font_Size = 12.0;
    Font_Style = 0;
    Font_Color = 0, 0, 0;
    Font_Background_Color = 255, 255, 255;
    Draw_Timing = Simulation_Step;
    Draw_Interval = 1;
    Graph_Name = "bridgecore";
    Title = "core";
    Disable = No;
    Background_Color = 255, 255, 255;
    Remarks = Yes;
    Legend_Pos = Top;
    FastDraw = No;
    Position_x = 22;
    Position_y = 17;
    Size_x = 519;
    Size_y = 533;
    Map_Cell_Size = -1;
    Axis_Label = "", "";
    Draw_By_JFree_Chart = Yes;
    Scale = 0, 0.0, 1000, 100.0, 100, 10.0;
    ScaleAuto = Yes, Yes;
    Output_Group_Name = "";
    Output {
        Graph_Element_Name = "core1";
        Line_Color = 255, 0, 0;
        Line_Width = 2;
        Marker_Id = 0;
        Output_Expression = "universe.Map.bridgecore(0).strength";
        Expression_Value_Display = No;
        Effective_Fraction_Figures = 0;
        Graph_Element_Color = (0, 255, 0);
    }
    Output {
        Graph_Element_Name = "core2";
        Line_Color = 0, 0, 255;
        Line_Width = 2;
        Marker_Id = 0;
        Output_Expression = "universe.Map.bridgecore(1).strength";
        Expression_Value_Display = No;
        Effective_Fraction_Figures = 0;
        Graph_Element_Color = (255, 255, 0);
    }
    Output {
        Graph_Element_Name = "core3";
        Line_Color = 0, 255, 0;
        Line_Width = 2;
        Marker_Id = 0;
        Output_Expression = "universe.Map.bridgecore(2).strength";
        Expression_Value_Display = No;
        Effective_Fraction_Figures = 0;
        Graph_Element_Color = (255, 102, 0);
    }
    Output {
        Graph_Element_Name = "core4";
        Line_Color = 255, 0, 255;
        Line_Width = 2;
        Marker_Id = 0;
        Output_Expression = "universe.Map.bridgecore(3).strength";
        Expression_Value_Display = No;
        Effective_Fraction_Figures = 0;
        Graph_Element_Color = (255, 0, 0);
    }
    Output {
        Graph_Element_Name = "core5";
        Line_Color = 0, 255, 255;
        Line_Width = 2;
        Marker_Id = 0;
        Output_Expression = "universe.Map.bridgecore(4).strength";
        Expression_Value_Display = No;
        Effective_Fraction_Figures = 0;
        Graph_Element_Color = (255, 0, 255);
    }
    Output {
        Graph_Element_Name = "core6";
        Line_Color = 255, 255, 0;
        Line_Width = 2;
        Marker_Id = 0;
        Output_Expression = "universe.Map.bridgecore(5).strength";
        Expression_Value_Display = No;
        Effective_Fraction_Figures = 0;
        Graph_Element_Color = (0, 0, 255);
    }
    Output {
        Graph_Element_Name = "core7";
        Line_Color = 128, 128, 128;
        Line_Width = 2;
        Marker_Id = 0;
        Output_Expression = "universe.Map.bridgecore(6).strength";
        Expression_Value_Display = No;
        Effective_Fraction_Figures = 0;
        Graph_Element_Color = (153, 153, 153);
    }
    Output {
        Graph_Element_Name = "core8";
        Line_Color = 255, 0, 0;
        Line_Width = 2;
        Marker_Id = 0;
        Output_Expression = "universe.Map.bridgecore(7).strength";
        Expression_Value_Display = No;
        Effective_Fraction_Figures = 0;
        Graph_Element_Color = (0, 102, 102);
    }
    Output {
        Graph_Element_Name = "core9";
        Line_Color = 128, 128, 128;
        Line_Width = 2;
        Marker_Id = 0;
        Output_Expression = "universe.Map.bridgecore(8).strength";
        Expression_Value_Display = No;
        Effective_Fraction_Figures = 0;
        Graph_Element_Color = (0, 153, 153);
    }
}


//-------------------------------------------------------
// Time Graph Output Definition Division
//-------------------------------------------------------
Time_Graph {
    Font_Name = "Dialog";
    Font_Char_Set = 81;
    Font_Size = 12.0;
    Font_Style = 0;
    Font_Color = 0, 0, 0;
    Font_Background_Color = 255, 255, 255;
    Draw_Timing = Simulation_Step;
    Draw_Interval = 1;
    Graph_Name = "endagt";
    Title = "end agt";
    Disable = Yes;
    Background_Color = 255, 255, 255;
    Remarks = Yes;
    Legend_Pos = Top;
    FastDraw = No;
    Position_x = 831;
    Position_y = 370;
    Size_x = 536;
    Size_y = 502;
    Map_Cell_Size = -1;
    Axis_Label = "", "";
    Draw_By_JFree_Chart = Yes;
    Scale = 0, 0.0, 1000, 100.0, 100, 10.0;
    ScaleAuto = Yes, Yes;
    Output_Group_Name = "";
    Output {
        Graph_Element_Name = "end agt";
        Line_Color = 0, 0, 255;
        Line_Width = 2;
        Marker_Id = 0;
        Output_Expression = "universe.numberofendagt";
        Expression_Value_Display = No;
        Effective_Fraction_Figures = 0;
        Graph_Element_Color = (0, 255, 0);
    }
}


//-------------------------------------------------------
// Time Graph Output Definition Division
//-------------------------------------------------------
Time_Graph {
    Font_Name = "Dialog";
    Font_Char_Set = 81;
    Font_Size = 12.0;
    Font_Style = 0;
    Font_Color = 0, 0, 0;
    Font_Background_Color = 255, 255, 255;
    Draw_Timing = Simulation_Step;
    Draw_Interval = 1;
    Graph_Name = "time";
    Title = "time";
    Disable = Yes;
    Background_Color = 255, 255, 255;
    Remarks = Yes;
    Legend_Pos = Top;
    FastDraw = No;
    Position_x = 42;
    Position_y = 576;
    Size_x = 510;
    Size_y = 301;
    Map_Cell_Size = -1;
    Axis_Label = "", "";
    Draw_By_JFree_Chart = Yes;
    Scale = 0, 0.0, 1000, 100.0, 100, 10.0;
    ScaleAuto = Yes, Yes;
    Output_Group_Name = "";
    Output {
        Graph_Element_Name = "timecount";
        Line_Color = 0, 0, 255;
        Line_Width = 2;
        Marker_Id = 0;
        Output_Expression = "universe.Map.Person(0).timecount";
        Expression_Value_Display = No;
        Effective_Fraction_Figures = 0;
        Graph_Element_Color = (51, 0, 255);
    }
    Output {
        Graph_Element_Name = "freetime";
        Line_Color = 0, 255, 255;
        Line_Width = 2;
        Marker_Id = 0;
        Output_Expression = "universe.Map.Person(0).freetime";
        Expression_Value_Display = No;
        Effective_Fraction_Figures = 0;
        Graph_Element_Color = (255, 102, 0);
    }
    Output {
        Graph_Element_Name = "freetime_sum";
        Line_Color = 255, 255, 0;
        Line_Width = 2;
        Marker_Id = 0;
        Output_Expression = "universe.Map.Person(0).freetime_sum";
        Expression_Value_Display = No;
        Effective_Fraction_Figures = 0;
        Graph_Element_Color = (204, 0, 0);
    }
}


//-------------------------------------------------------
// Time Graph Output Definition Division
//-------------------------------------------------------
Time_Graph {
    Font_Name = "Dialog";
    Font_Char_Set = 81;
    Font_Size = 12.0;
    Font_Style = 0;
    Font_Color = 0, 0, 0;
    Font_Background_Color = 255, 255, 255;
    Draw_Timing = Simulation_Step;
    Draw_Interval = 1;
    Graph_Name = "archive and money";
    Title = "archive and money";
    Disable = Yes;
    Background_Color = 255, 255, 255;
    Remarks = Yes;
    Legend_Pos = Top;
    FastDraw = No;
    Position_x = 58;
    Position_y = 173;
    Size_x = 536;
    Size_y = 609;
    Map_Cell_Size = -1;
    Axis_Label = "", "";
    Draw_By_JFree_Chart = Yes;
    Scale = 0, 0.0, 1000, 100.0, 100, 10.0;
    ScaleAuto = Yes, Yes;
    Output_Group_Name = "";
    Output {
        Graph_Element_Name = "archive";
        Line_Color = 255, 0, 0;
        Line_Width = 2;
        Marker_Id = 0;
        Output_Expression = "universe.Map.Person(1).archivement";
        Expression_Value_Display = No;
        Effective_Fraction_Figures = 0;
        Graph_Element_Color = (0, 255, 0);
    }
    Output {
        Graph_Element_Name = "money";
        Line_Color = 0, 0, 255;
        Line_Width = 2;
        Marker_Id = 0;
        Output_Expression = "universe.Map.Person(1).money";
        Expression_Value_Display = No;
        Effective_Fraction_Figures = 0;
        Graph_Element_Color = (0, 0, 153);
    }
}


//-------------------------------------------------------
// Time Graph Output Definition Division
//-------------------------------------------------------
Time_Graph {
    Font_Name = "Dialog";
    Font_Char_Set = 81;
    Font_Size = 12.0;
    Font_Style = 0;
    Font_Color = 0, 0, 0;
    Font_Background_Color = 255, 255, 255;
    Draw_Timing = Simulation_Step;
    Draw_Interval = 1;
    Graph_Name = "stat_consump&freetime&movetime";
    Title = "consump,freetime,movetime";
    Disable = Yes;
    Background_Color = 255, 255, 255;
    Remarks = Yes;
    Legend_Pos = Top;
    FastDraw = No;
    Position_x = 72;
    Position_y = 67;
    Size_x = 655;
    Size_y = 472;
    Map_Cell_Size = -1;
    Axis_Label = "", "";
    Draw_By_JFree_Chart = Yes;
    Scale = 0, 0.0, 1000, 100.0, 100, 10.0;
    ScaleAuto = Yes, Yes;
    Output_Group_Name = "";
    Output {
        Graph_Element_Name = "consump0";
        Line_Color = 255, 0, 0;
        Line_Width = 2;
        Marker_Id = 0;
        Output_Expression = "universe.Map.Person(0).consump_sum";
        Expression_Value_Display = No;
        Effective_Fraction_Figures = 0;
        Graph_Element_Color = (0, 255, 0);
    }
    Output {
        Graph_Element_Name = "consump1";
        Line_Color = 255, 50, 0;
        Line_Width = 2;
        Marker_Id = 0;
        Output_Expression = "universe.Map.Person(1).consump_sum";
        Expression_Value_Display = No;
        Effective_Fraction_Figures = 0;
        Graph_Element_Color = (0, 204, 0);
    }
    Output {
        Graph_Element_Name = "freetime0";
        Line_Color = 255, 100, 0;
        Line_Width = 2;
        Marker_Id = 0;
        Output_Expression = "universe.Map.Person(0).freetime_sum";
        Expression_Value_Display = No;
        Effective_Fraction_Figures = 0;
        Graph_Element_Color = (51, 51, 255);
    }
    Output {
        Graph_Element_Name = "freetime1";
        Line_Color = 255, 150, 0;
        Line_Width = 2;
        Marker_Id = 0;
        Output_Expression = "universe.Map.Person(1).freetime_sum";
        Expression_Value_Display = No;
        Effective_Fraction_Figures = 0;
        Graph_Element_Color = (0, 102, 153);
    }
    Output {
        Graph_Element_Name = "movetime0";
        Line_Color = 255, 200, 0;
        Line_Width = 2;
        Marker_Id = 0;
        Output_Expression = "universe.Map.Person(0).timecount_sum";
        Expression_Value_Display = No;
        Effective_Fraction_Figures = 0;
        Graph_Element_Color = (255, 51, 51);
    }
    Output {
        Graph_Element_Name = "movetime1";
        Line_Color = 255, 250, 0;
        Line_Width = 2;
        Marker_Id = 0;
        Output_Expression = "universe.Map.Person(1).timecount_sum";
        Expression_Value_Display = No;
        Effective_Fraction_Figures = 0;
        Graph_Element_Color = (153, 0, 51);
    }
}


//-------------------------------------------------------
// Time Graph Output Definition Division
//-------------------------------------------------------
Time_Graph {
    Font_Name = "Dialog";
    Font_Char_Set = 81;
    Font_Size = 12.0;
    Font_Style = 0;
    Font_Color = 0, 0, 0;
    Font_Background_Color = 255, 255, 255;
    Draw_Timing = Simulation_Step;
    Draw_Interval = 1;
    Graph_Name = "day";
    Title = "day";
    Disable = No;
    Background_Color = 255, 255, 255;
    Remarks = Yes;
    Legend_Pos = Top;
    FastDraw = No;
    Position_x = 645;
    Position_y = 552;
    Size_x = 665;
    Size_y = 325;
    Map_Cell_Size = -1;
    Axis_Label = "", "";
    Draw_By_JFree_Chart = Yes;
    Scale = 0, 0.0, 1000, 100.0, 100, 10.0;
    ScaleAuto = Yes, Yes;
    Output_Group_Name = "";
    Output {
        Graph_Element_Name = "day";
        Line_Color = 255, 0, 0;
        Line_Width = 2;
        Marker_Id = 0;
        Output_Expression = "universe.day";
        Expression_Value_Display = No;
        Effective_Fraction_Figures = 0;
        Graph_Element_Color = (0, 255, 0);
    }
}


//-------------------------------------------------------
// Time Graph Output Definition Division
//-------------------------------------------------------
Time_Graph {
    Font_Name = "Dialog";
    Font_Char_Set = 81;
    Font_Size = 12.0;
    Font_Style = 0;
    Font_Color = 0, 0, 0;
    Font_Background_Color = 255, 255, 255;
    Draw_Timing = Simulation_Step;
    Draw_Interval = 1;
    Graph_Name = "damage,etc";
    Title = "damage,etc";
    Disable = No;
    Background_Color = 255, 255, 255;
    Remarks = Yes;
    Legend_Pos = Top;
    FastDraw = No;
    Position_x = 32;
    Position_y = 569;
    Size_x = 596;
    Size_y = 308;
    Map_Cell_Size = -1;
    Axis_Label = "", "";
    Draw_By_JFree_Chart = Yes;
    Scale = 0, 0.0, 1000, 100.0, 100, 10.0;
    ScaleAuto = Yes, Yes;
    Output_Group_Name = "";
    Output {
        Graph_Element_Name = "damage";
        Line_Color = 0, 255, 0;
        Line_Width = 2;
        Marker_Id = 0;
        Output_Expression = "universe.Map.government.bridge_damage(8)";
        Expression_Value_Display = No;
        Effective_Fraction_Figures = 0;
        Graph_Element_Color = (0, 255, 0);
    }
    Output {
        Graph_Element_Name = "status";
        Line_Color = 255, 0, 255;
        Line_Width = 2;
        Marker_Id = 0;
        Output_Expression = "universe.Map.government.bridge_status(8)";
        Expression_Value_Display = No;
        Effective_Fraction_Figures = 0;
        Graph_Element_Color = (0, 51, 102);
    }
}


//-------------------------------------------------------
// Control Panel Definition Division
//-------------------------------------------------------
Control_Panel {
    Display_Area = 0, 0, 100, 100;
}


//-------------------------------------------------------
// Space Initial Value Definition Divsion
//-------------------------------------------------------
Space_Initial {
}


//-------------------------------------------------------
// Other Miscellaneous Data Definition Division
//-------------------------------------------------------
Others_Data {
    Indent = 4;
    Rule_Colored = Yes;
    Window_Hide_Run = 1;
    Debug_Position_x = 245;
    Debug_Position_y = 10;
    Debug_Size_x = 400;
    Debug_Size_y = 200;
    Console_Position_x = 14;
    Console_Position_y = 186;
    Console_Size_x = 226;
    Console_Size_y = 689;
    Componen_Tree_Position_x = 2;
    Componen_Tree_Position_y = 2;
    Componen_Tree_Size_x = 227;
    Componen_Tree_Size_y = 400;
    Console_Background_Color = 10066329;
    Console_Foreground_Color = 255;
    Console_DisplayLines_Max = 500;
    Font_Name = "Dialog";
    Font_Char_Set = 0;
    Font_Size = 18.0;
    Font_Style = 0;
    Font_Color = 0, 0, 0;
    Font_Background_Color = 0, 0, 0;
}


//-------------------------------------------------------
// Network Information Definition Division
//-------------------------------------------------------
Network_Info {
    Global_Space_Area = 0, 0, 100, 100;
    Local_Space_Info {
    }
}


//-------------------------------------------------------
// Space Map Initial Value Definition Division
//-------------------------------------------------------
Space_Map_Initial_Value {
    Space_Path_Name = Universe.Map;
    Background_Image_File_Path_Name = "..\..\Downloads\ph3.jpg";
    Origin_Position = Left_Bottom;
    Position_Agent {
        Agent_Name = Universe.Map.Point;
        Marker_Color = 255, 0, 0;
        Marker_Id = 1;
        Value = (44.991055456171736,43.112701252236135,0),(42.486583184257604,43.20214669051879,0),(43.20214669051879,40.429338103756706,0),(46.86940966010734,37.924865831842574,0),(45.16994633273703,34.34704830053667,0)
               ,(40.96601073345259,33.18425760286225,0),(43.82826475849731,28.354203935599283,0),(45.52772808586762,25.670840787119857,0),(48.21109123434705,28.443649373881932,0),(47.49552772808587,20.125223613595708,0)
               ,(42.039355992844364,18.872987477638638,0),(46.69051878354204,15.921288014311273,0),(41.77101967799642,14.758497316636848,0),(43.47048300536673,11.359570661896242,0),(46.601073345259394,10.644007155635066,0)
               ,(44.72271914132379,5.992844364937383,0),(41.94991055456172,7.781753130590339,0),(47.13774597495528,3.398926654740606,0),(49.28443649373882,5.903398926654745,0),(48.83720930232558,0.8050089445438289,0)
               ,(43.38103756708408,46.2432915921288,0),(37.2093023255814,42.39713774597496,0),(36.76207513416816,37.83542039355993,0),(38.46153846153846,34.883720930232556,0),(41.59212880143113,37.11985688729875,0)
               ,(37.47763864042934,31.48479427549195,0),(33.72093023255814,37.11985688729875,0),(35.3309481216458,28.354203935599283,0),(38.550983899821105,25.58139534883721,0),(39.803220035778175,20.840787119856888,0)
               ,(36.85152057245081,15.563506261180677,0),(37.29874776386404,12.880143112701248,0),(38.81932021466905,10.017889087656528,0),(37.65652951699463,5.187835420393554,0),(38.550983899821105,2.0572450805008913,0)
               ,(40.96601073345259,2.593917710196777,0),(34.97316636851521,42.039355992844364,0),(34.16815742397138,45.43828264758497,0),(37.83542039355993,47.227191413237925,0),(40.33989266547406,47.76386404293381,0)
               ,(47.76386404293381,45.796064400715565,0),(29.427549194991055,48.21109123434705,0),(29.338103756708406,45.70661896243291,0),(29.427549194991055,41.14490161001789,0),(29.427549194991055,39.355992844364934,0)
               ,(29.24865831842576,35.688729874776385,0),(29.159212880143112,33.09481216457961,0),(29.159212880143112,28.80143112701252,0),(29.60644007155635,25.760286225402503,0),(29.785330948121647,23.70304114490161,0)
               ,(29.695885509838998,19.677996422182467,0),(30.500894454382827,17.71019677996422,0),(31.127012522361362,12.254025044722717,0),(30.232558139534884,8.944543828264756,0),(31.037567084078713,6.171735241502688,0)
               ,(30.41144901610018,1.6100178890876577,0),(3.1305903398926667,47.13774597495528,0),(1.967799642218246,42.39713774597496,0),(6.797853309481216,35.509838998211094,0),(0.8944543828264742,30.85867620751342,0)
               ,(4.83005366726297,24.239713774597497,0),(8.228980322003576,25.22361359570662,0),(4.293381037567084,18.783542039355993,0),(2.5939177101967807,21.10912343470483,0),(2.8622540250447237,15.474060822898032,0)
               ,(10.465116279069766,14.579606440071558,0),(8.050089445438282,12.611806797853305,0),(2.772808586762075,11.896243291592128,0),(2.236135957066189,9.302325581395351,0),(1.699463327370303,5.635062611806802,0)
               ,(4.472271914132378,2.9516994633273725,0),(6.797853309481216,2.1466905187835437,0),(5.277280858676207,5.992844364937383,0),(5.098389982110913,8.676207513416813,0),(8.318425760286225,9.033989266547408,0)
               ,(9.838998211091234,6.529516994633269,0),(13.595706618962433,3.2200357781753155,0),(12.790697674418604,7.42397137745975,0),(14.490161001788909,11.53846153846154,0),(13.595706618962433,16.368515205724506,0)
               ,(11.180679785330948,17.262969588550988,0),(5.813953488372093,17.08407871198569,0),(9.481216457960643,21.10912343470483,0),(13.416815742397137,20.39355992844365,0),(13.416815742397137,27.191413237924866,0)
               ,(10.822898032200358,27.638640429338103,0),(9.033989266547406,31.932021466905187,0),(12.611806797853308,31.932021466905187,0),(17.262969588550984,28.354203935599283,0),(10.822898032200358,37.11985688729875,0)
               ,(8.765652951699462,39.71377459749553,0),(13.595706618962433,39.98211091234347,0),(8.676207513416816,43.38103756708408,0),(5.54561717352415,45.974955277280856,0),(9.391771019677996,46.779964221824685,0)
               ,(6.8872987477638645,48.56887298747764,0),(16.368515205724506,1.699463327370303,0),(17.88908765652952,4.203935599284435,0),(18.6046511627907,9.212880143112699,0),(18.51520572450805,13.506261180679786,0)
               ,(17.88908765652952,18.783542039355993,0),(19.23076923076923,23.076923076923077,0),(20.304114490161002,28.08586762075134,0),(17.79964221824687,31.3953488372093,0),(15.026833631484793,34.704830053667266,0)
               ,(15.384615384615385,37.29874776386404,0),(15.56350626118068,41.50268336314848,0),(14.04293381037567,44.5438282647585,0),(15.116279069767442,46.601073345259394,0),(16.27906976744186,47.94275491949911,0);
    }
    Position_Agent {
        Agent_Name = Universe.Map.government;
        Marker_Color = 255, 0, 0;
        Marker_Id = 1;
        Value = (24.41860465116279,23.613595706618963,0);
    }
    Position_Agent {
        Agent_Name = Universe.Map.bridgecore;
        Marker_Color = 153, 0, 153;
        Marker_Id = 5;
        Value = (22.361359570661897,44.812164579606446,0),(22.003577817531305,38.64042933810376,0),(22.361359570661897,34.61538461538461,0),(21.82468694096601,29.427549194991055,0),(22.003577817531305,23.881932021466906,0)
               ,(21.735241502683362,19.856887298747765,0),(24.955277280858677,11.449016100178895,0),(23.166368515205725,6.082289803220036,0),(22.719141323792485,3.4883720930232585,0);
    }
    Link_Agent {
        Agent_Name = Universe.Link;
        Line_Color = 0, 255, 0;
        Line_Type = 1;
        Arrow_Type = 1;
        Link_Id = "Universe.Map.Point/Universe.Map.Point";
        Link = (0,0,1),(0,1,2),(0,2,3),(0,3,4),(0,4,5)
              ,(0,5,6),(0,6,7),(0,7,8),(0,8,9),(0,9,10)
              ,(0,10,11),(0,11,12),(0,12,13),(0,13,14),(0,14,15)
              ,(0,15,16),(0,16,17),(0,17,18),(0,18,19),(0,20,21)
              ,(0,21,22),(0,22,23),(0,23,24),(0,24,25),(0,25,26)
              ,(0,26,27),(0,27,28),(0,28,29),(0,29,30),(0,30,31)
              ,(0,31,32),(0,32,33),(0,33,34),(0,34,35),(0,35,19)
              ,(0,19,16),(0,16,15),(0,15,35),(0,35,34),(0,34,33)
              ,(0,33,16),(0,16,13),(0,13,32),(0,32,12),(0,12,31)
              ,(0,31,10),(0,10,30),(0,30,7),(0,7,29),(0,29,28)
              ,(0,28,6),(0,6,27),(0,27,25),(0,25,5),(0,26,23)
              ,(0,23,26),(0,26,22),(0,22,26),(0,26,21),(0,21,36)
              ,(0,36,37),(0,37,38),(0,38,39),(0,39,20),(0,20,38)
              ,(0,38,20),(0,20,1),(0,1,20),(0,20,0),(0,0,20)
              ,(0,20,40),(0,40,3),(0,3,2),(0,2,24),(0,24,2)
              ,(0,2,22),(0,22,24),(0,24,3),(0,3,4),(0,4,6)
              ,(0,6,4),(0,4,8),(0,8,4),(0,4,7),(0,7,9)
              ,(0,9,11),(0,11,14),(0,14,18),(0,18,14),(0,14,13)
              ,(0,13,11),(0,11,9),(0,9,18),(0,18,8),(0,3,8)
              ,(0,41,42),(0,42,43),(0,43,44),(0,44,45),(0,45,46)
              ,(0,46,47),(0,47,48),(0,48,49),(0,49,50),(0,50,51)
              ,(0,51,52),(0,52,53),(0,53,54),(0,54,55),(0,34,55)
              ,(0,55,33),(0,33,54),(0,54,32),(0,32,53),(0,53,31)
              ,(0,31,52),(0,52,30),(0,30,51),(0,51,29),(0,29,50)
              ,(0,50,28),(0,28,49),(0,49,27),(0,27,46),(0,46,47)
              ,(0,47,26),(0,26,48),(0,48,25),(0,25,46),(0,46,45)
              ,(0,45,23),(0,23,26),(0,26,22),(0,22,41),(0,41,38)
              ,(0,38,41),(0,41,37),(0,37,43),(0,43,44),(0,44,36)
              ,(0,36,45),(0,45,5),(0,56,57),(0,57,58),(0,58,59)
              ,(0,59,60),(0,60,61),(0,61,62),(0,62,63),(0,63,64)
              ,(0,64,65),(0,65,66),(0,66,67),(0,67,68),(0,68,69)
              ,(0,69,70),(0,70,71),(0,71,72),(0,72,73),(0,73,74)
              ,(0,74,75),(0,75,76),(0,76,77),(0,77,78),(0,78,79)
              ,(0,79,80),(0,80,81),(0,81,82),(0,82,83),(0,83,84)
              ,(0,84,85),(0,85,86),(0,86,87),(0,87,88),(0,88,89)
              ,(0,89,90),(0,90,91),(0,91,92),(0,92,93),(0,93,94)
              ,(0,94,95),(0,95,56),(0,56,93),(0,93,58),(0,58,90)
              ,(0,90,57),(0,57,59),(0,59,63),(0,63,61),(0,61,60)
              ,(0,60,62),(0,62,81),(0,81,62),(0,62,82),(0,82,80)
              ,(0,80,83),(0,83,79),(0,79,65),(0,65,67),(0,67,64)
              ,(0,64,66),(0,66,68),(0,68,73),(0,73,66),(0,66,74)
              ,(0,74,72),(0,72,75),(0,75,71),(0,71,77),(0,77,76)
              ,(0,76,69),(0,69,73),(0,73,74),(0,74,78),(0,78,66)
              ,(0,66,65),(0,65,81),(0,81,64),(0,64,62),(0,62,61)
              ,(0,61,84),(0,84,61),(0,61,85),(0,85,59),(0,59,86)
              ,(0,86,58),(0,58,89),(0,89,91),(0,91,86),(0,86,84)
              ,(0,84,88),(0,88,96),(0,96,97),(0,97,98),(0,98,99)
              ,(0,99,100),(0,100,101),(0,101,102),(0,102,103),(0,103,104)
              ,(0,104,105),(0,105,106),(0,106,107),(0,107,108),(0,108,109)
              ,(0,109,43),(0,43,44),(0,44,103),(0,103,44),(0,44,46)
              ,(0,46,100),(0,100,99),(0,99,45),(0,45,99),(0,99,98)
              ,(0,98,55),(0,55,54),(0,54,96),(0,96,76),(0,76,96)
              ,(0,96,97),(0,97,51),(0,51,50),(0,50,105),(0,105,106)
              ,(0,106,45),(0,101,83),(0,83,101),(0,101,102),(0,102,88)
              ,(0,88,102),(0,104,87),(0,87,104),(0,104,105),(0,105,106)
              ,(0,106,107),(0,107,92),(0,92,107),(0,107,108),(0,108,94)
              ,(0,98,77),(0,77,98);
    }
}


//-------------------------------------------------------
// Window Location Definition Division
//-------------------------------------------------------
Window_Rectangle {
    Window_Name = Main_Window, 0, 23, 1319, 999;
    Window_Name = Output_Setting_Window, 422, 344, 480, 290;
}


//-------------------------------------------------------
// Help Favorite Division
//-------------------------------------------------------
Help_Favorite {
}
